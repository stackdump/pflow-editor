{"version":3,"sources":["Pflow/Pflow.js","Pflow/Toolbar.js","Pflow/Properties.js","Pflow/Menu.js","Pflow/Drag.js","Pflow/Place.js","Pflow/Arc.js","Pflow/Transition.js","Pflow/Var.js","Pflow/Net.js","Pflow/Simulation.js","Pflow/PTNet.js","Pflow/Templates.js","Pflow/Editor.js","App.js","serviceWorker.js","index.js"],"names":["getCoords","obj","x","parseInt","y","getId","id","getWeight","arc","PTNet","schema","net","this","places","transitions","PFlow","pnml","_pnml","_place_ids","_place_labels","_transition_ids","size","Object","keys","length","v","i","subnet","n","loadSubnets","placeIn","entries","p","label","offset","capacity","initial","tokens","position","t","role","delta","emptyVector","guards","a","pkey","tkey","unit","isTransition","place_offset","place_label","type","g","document","r","name","tid","ACTIONS","Toolbar","props","menuAction","bind","action","ptnet","mode","setState","getMode","state","Fragment","actions","map","style","color","key","onClick","onContextMenu","evt","preventDefault","className","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Properties","handleChange","getData","tab","val","getCurrentObj","data","selected","getType","related","relatedObjects","vars","source","getObj","target","classes","Paper","square","Tabs","value","indicatorColor","textColor","onChange","Tab","maxWidth","Typography","variant","JSON","stringify","ButtonAppBar","AppBar","href","rel","dropdownLink","Draggable","dragging","positionUpdated","stopPropagation","window","innerWidth","isSelected","Place","onAltClick","placeClick","placeAltClick","onMouseDown","startDrag","onMouseUp","endDrag","onMouseMove","cx","cy","getHandleWidth","fill","stroke","strokeWidth","getStroke","orient","shapeRendering","getTokenCount","tokenCount","Arc","getMarker","arcClick","getArcDef","arcAltClick","x1","y1","x2","y2","midX","midY","offsetX","offsetY","Math","abs","weight","inhibitor","markerEnd","Transition","isRunning","canFire","transitionFails","transitionClick","transform","onDoubleClick","console","log","width","height","getFill","PVar","varClick","varAltClick","strokeDasharray","description","Net","place_index","index","arcs","txn","place","push","transition","StateMachine","guardsFail","fire","multiple","vout","valid","oid","vadd","error","callback","res","onLoad","onSave","onUpdate","pflow","applyVars","update","save","simulation","lastSelected","currentSelection","editorClick","rule","m","mapping","updated","el","indexOf","movementX","movementY","coords","newOffset","placeSeq","transitionSeq","addPlace","clientX","clientY","addTransition","addVar","begin","end","validArc","addArc","pairSelected","onObjSelect","delPlace","selectObj","match","pid","addGuardToken","addArcToken","delArc","toggleInhibitor","varSeq","addVarToken","TEMPLATES","pf","Editor","ptNet","getPflow","setPflow","markerWidth","markerHeight","refX","refY","d","App","parse","success","xhr","XMLHttpRequest","open","onload","e","readyState","status","parseString","responseText","err","pflow_json","reindex","statusText","onerror","send","OpenPflow","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8347bbd4.chunk.js","sourcesContent":["\n// initialMarking format is \"Default,0\"\nimport {parseString} from \"xml2js\";\n\nfunction getInitial(placeIn) {\n    return parseInt(placeIn.tokens[0])\n}\n\nfunction getCap(placeIn) {\n    return 0\n}\n\nfunction getCoords(obj) {\n    // REVIEW: pflow designates negative values\n    return { x: parseInt(obj.x), y: parseInt(obj.y)}\n}\n\nfunction getId(obj) {\n    return obj.id[0]\n}\n\nfunction getName(obj) {\n    return obj.name[0]\n}\n\nfunction getWeight(arc) {\n    return parseInt(arc['multiplicity'][0])\n}\n\nfunction isInhibitor(arc) {\n    return arc.type[0] === \"inhibitor\"\n}\n\nexport default function OpenPflow(schema, success, error) {\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"schemata/\"+schema+\".pflow\", true);\n    xhr.onload = (e) => {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                parseString(xhr.responseText, (err, pflow_json) => {\n                    if (err) {\n                        console.error(err)\n                    } else {\n                        let net = new PFlow(schema, pflow_json);\n                        net.reindex();\n                        success(new PTNet(schema, net));\n                    }\n                });\n            } else {\n                error(xhr.statusText);\n                console.error(xhr.statusText);\n            }\n        }\n    };\n    xhr.onerror = function (e) {\n        console.error(xhr.statusText);\n        return null;\n    };\n    xhr.send(null);\n}\n\nclass PTNet {\n    constructor(schema, net) {\n        this.schema = net.schema;\n        this.places = net.places;\n        this.transitions = net.transitions;\n    }\n\n}\n\n// construct PTNet from PFlow\nclass PFlow {\n    constructor(schema, pnml){\n        this.schema = schema;\n        this.places = {};\n        this.transitions = {};\n\n        // used to reindex pflow -> ptnet\n        this._pnml = pnml; // KLUDGE only use first net\n        this._place_ids = {}; // map[string] => offset\n        this._place_labels = {}; // map[string::id] => string\n        this._transition_ids = {}; // map[string] => offset\n    }\n\n    emptyVector() {\n        let size = Object.keys(this.places).length;\n        let v = [];\n        for (let i = 0; i < size; i++) {\n            v[i] = 0;\n        }\n        return v\n    }\n\n    loadSubnets(subnet) {\n\n        if(subnet.subnet) {\n            for (const n of subnet.subnet) {\n                this.loadSubnets(n);\n            }\n        }\n\n        for (const [i, p] of subnet['place'].entries()) {\n            this._place_ids[getId(p)] = i;\n            this._place_labels[getId(p)] = p.label;\n\n            this.places[p.label] = {\n                offset: i,\n                capacity: getCap(p),\n                initial: getInitial(p),\n                position: getCoords(p),\n            };\n        }\n\n        for (const t of subnet['transition']) {\n            this._transition_ids[getId(t)] = t.label;\n            this.transitions[t.label] = {\n                role: \"default\",\n                delta: this.emptyVector(),\n                position: getCoords(t),\n                guards: {},\n            };\n        }\n\n        for ( const a of subnet['arc']) {\n            let pkey = \"\";\n            let tkey = \"\";\n            let unit = null;\n\n            if (this.isTransition(a['destinationId'][0])) {\n                //console.log('(', s, ')', '<-[', d, ']')\n                tkey = 'destinationId';\n                pkey = 'sourceId';\n                unit = getWeight(a)*-1;\n            } else {\n                //console.log('[', s, '] ->','(', d, ')' )\n                tkey = 'sourceId';\n                pkey = 'destinationId';\n                unit = getWeight(a);\n            }\n\n            // TODO deal w/ ref_places (from subnets)\n\n            let t = this.transitions[this._transition_ids[a[tkey]]];\n            let place_offset = this._place_ids[a[pkey]];\n            let place_label = this._place_labels[a[pkey]];\n\n            if (isInhibitor(a)) {\n                let g = this.emptyVector();\n                //console.log('inhibitor', unit)\n                g[place_offset] = unit; // FIXME should this be inverted?\n                t.guards[place_label] = g;\n            }  else {\n                t.delta[place_offset] = unit;\n            }\n\n        }\n    }\n\n    isTransition(label) {\n        if (label in this._transition_ids) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    reindex() {\n        for (const n of this._pnml.document['subnet']) {\n            this.loadSubnets(n);\n        }\n\n        for (const r of this._pnml.document['roles'][0].role) {\n            const label = getName(r);\n            for (const tid of r['transitionId']) {\n                this.transitions[this._transition_ids[tid]].role = label;\n            }\n        }\n    }\n};\n\n","import React, { Component } from 'react'\n\nconst ACTIONS = [\n    \"select\",\n    \"delete\",\n    \"var\",\n    \"place\",\n    \"transition\",\n    \"arc\",\n    \"token\",\n    \"execute\",\n];\n\nexport default class Toolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.menuAction = this.menuAction.bind(this);\n    }\n\n    menuAction(action) {\n        this.props.ptnet.menuAction(action, (mode) => {\n            this.setState({ mode: mode })\n        })\n    }\n\n    componentDidMount() {\n        this.setState({ mode: this.props.ptnet.getMode() })\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment/>)\n        }\n\n        let actions = ACTIONS.map((label) => {\n            let style = { color: \"grey\"};\n            if (this.state.mode === label) {\n                style = { color: \"black\"};\n            }\n            return (<button key={label} style={style} name={label}\n                onClick={() => this.menuAction(label)}\n                onContextMenu={(evt) => evt.preventDefault() }\n            >{label}</button>)\n        }) ;\n\n        return (\n            <React.Fragment>\n                <div className=\"menu\" mode={this.props.ptnet.mode}> {actions} </div>\n                <hr />\n            </React.Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default class Properties extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ tab: 0 })\n    }\n\n    handleChange(evt, val) {\n        this.setState({ tab: val })\n    }\n\n    getData() {\n        let obj = this.props.ptnet.getCurrentObj();\n\n        let data = {\n            selected: obj,\n        };\n\n        if (! obj) {\n            return { type: \"Select\" }\n        }\n\n        data.type = this.props.ptnet.getType(obj);\n        data.related = this.props.ptnet.relatedObjects;\n\n        if (!obj)  {\n            return this.props.ptnet.vars;\n        }\n\n        switch (this.state.tab) {\n            case 0: {\n                data.source = this.props.ptnet.getObj(obj['source']);\n                data.target = this.props.ptnet.getObj(obj['target']);\n                break\n            }\n            case 1: {\n                data.vars =this.props.ptnet.vars;\n                break\n            }\n            default :{\n            }\n        }\n\n        return data\n    }\n\n    render() {\n        if (! this.state)  {\n            return <React.Fragment />\n        }\n\n        let classes = useStyles;\n        let data = this.getData();\n\n        return (\n            <Paper square>\n                <Tabs\n                    value={this.state.tab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={this.handleChange} >\n                    <Tab label={data.type || \"Select\"} />\n                    <Tab label=\"Variables\" />\n\n                </Tabs>\n                <div style={{ maxWidth: '100%' }}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <pre>\n                        {JSON.stringify(data, null, \"\\t\")}\n                        </pre>\n                    </Typography>\n                </div>\n            </Paper>\n        )\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst useStyles = makeStyles(theme => ({\n      root: {\n              flexGrow: 1,\n            },\n      menuButton: {\n              marginRight: theme.spacing(2),\n            },\n      title: {\n              flexGrow: 1,\n            },\n}));\n\nexport default function ButtonAppBar() {\n      const classes = useStyles();\n\n      return (\n              <div className={classes.root}>\n                 <AppBar position=\"static\">\n                    <Toolbar>\n                       <Typography variant=\"h6\" className={classes.title}>\n                           Pflow-Editor\n                       </Typography>\n                        <a\n                            href=\"https://github.com/stackdump/pflow-editor\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className={classes.dropdownLink}\n                        > <GitHubIcon /> </a>\n                    </Toolbar>\n                 </AppBar>\n              </div>\n            );\n}\n","import {Component} from \"react\";\n\nexport default class Draggable extends Component {\n\n    // Keeps a user from mousing-out of the svg if dragging too quickly\n    getHandleWidth() {\n        if (this.state.dragging) {\n            return window.innerWidth*2\n        } else {\n            return 36\n        }\n    }\n\n    getStroke() {\n        if (this.props.ptnet.isSelected({target: this.props.id})) {\n            return \"#8140ff\"\n        }  else {\n            return \"#000000\"\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ dragging: false, })\n    }\n\n    startDrag(evt) {\n        this.setState({ dragging: true });\n        evt.stopPropagation();\n    }\n\n    endDrag(evt) {\n        this.setState({ dragging: false });\n        evt.stopPropagation();\n    }\n\n    dragging = (evt) => {\n        if (this.state.dragging) {\n            this.props.ptnet.positionUpdated(this, evt);\n        }\n        evt.stopPropagation();\n    };\n\n}\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Place extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.props.ptnet.placeClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    onAltClick(evt) {\n        this.props.ptnet.placeAltClick(this.props.id);\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    render() {\n        if (! this.state ) { return(<g/>) }\n        let p = this.props.ptnet.getObj(this.props.id).position;\n\n        let tokenCount = () => {\n            let tokens = this.props.ptnet.getTokenCount(this.props.id);\n\n            if (tokens === 0){\n                return // don't show zeros\n            } else if (tokens === 1) {\n                return (<circle cx={p.x} cy={p.y} r=\"2\" id={this.props.id+\"_tokens\"} fill=\"#000000\" stroke=\"#000000\" orient=\"0\" className=\"tokens\"/>)\n            } else if (tokens < 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-4} y={p.y+5} className=\"large\">{tokens}</text>)\n            } else if (tokens >= 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-7} y={p.y+5} className=\"small\">{tokens}</text>)\n            }\n        };\n\n        return (\n            <g\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onClick={this.onClick}\n                onContextMenu={this.onAltClick}\n            >\n                <circle id={this.props.id+\"_handle\"} cx={p.x} cy={p.y} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n                <circle cx={p.x} cy={p.y} r=\"20\"id={this.props.id}\n                        strokeWidth=\"1.5\" fill=\"#FFFFFF\" stroke={this.getStroke()} orient=\"0\"\n                        className=\"place\"\n                        shapeRendering=\"auto\"\n                />\n                {tokenCount()}\n                <text id={this.props.id+\"[label]\"} x={p.x-20} y={p.y-25} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n","import React, { Component } from 'react'\n\nexport default class Arc extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n        this.getMarker = this.getMarker.bind(this);\n        this.getStroke = this.getStroke.bind(this);\n    }\n\n    getArcDef() {\n        return {source: this.props.source, target: this.props.target};\n    }\n\n    onClick(evt) {\n        evt.stopPropagation();\n        this.props.ptnet.arcClick(this.getArcDef());\n    }\n\n    onAltClick(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.props.ptnet.arcAltClick(this.getArcDef());\n    }\n\n    getMarker() {\n        if (this.props['inhibitor']) {\n            return \"url(#markerInhibit1)\"\n        } else {\n            return \"url(#markerArrow1)\"\n        }\n    }\n\n    getStroke() {\n        let obj = { target: this.props.target, source: this.props.source };\n        if (this.props.ptnet.isSelected(obj)) {\n            return \"#8140ff\"\n        }  else {\n            return \"#000000\"\n        }\n    }\n\n    render() {\n        let source = this.props.ptnet.getObj(this.props.source);\n        let target = this.props.ptnet.getObj(this.props.target);\n        if (! source || ! target) {\n            return (< g/>)\n        }\n\n        let x1=source.position.x;\n        let y1=source.position.y;\n        let x2=target.position.x;\n        let y2=target.position.y;\n\n        let midX = (x2+x1)/2;\n        let midY = (y2+y1)/2 - 8;\n        let offsetX=4;\n        let offsetY=4;\n\n        if (Math.abs(x2-midX) < 8) {\n            offsetX=8;\n        }\n\n        if (Math.abs(y2-midY) < 8) {\n            offsetY=0;\n        }\n\n        let weight = 0;\n        if (this.props.inhibitor) {\n            if ('delta' in source) {\n                weight = source.guards[this.props.target][target.offset];\n            } else {\n                weight = target.guards[this.props.source][source.offset];\n            }\n        } else {\n            if ('delta' in source) {\n                weight = source['delta'][target.offset];\n            } else {\n                weight = target['delta'][source.offset];\n            }\n        }\n\n        return (\n            <g\n                onContextMenu={this.onAltClick}\n            >\n                <line\n                    stroke={this.getStroke()}\n                    markerEnd={this.getMarker()}\n                    id={this.props.id}\n                    x1={x1} y1={y1}\n                    x2={x2} y2={y2}\n                />\n                <text id={this.props.id+\"[label]\"} x={midX-offsetX} y={midY+offsetY} className=\"small\">{Math.abs(weight)}</text>\n                <circle id={this.props.id+\"[handle]\"}\n                    r={13} cx={midX} cy={midY} fill=\"transparent\" stroke=\"transparent\"\n                    onClick={this.onClick}\n                />\n            </g>\n        );\n    }\n};\n\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Transition extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    getFill() {\n        if (this.props.ptnet.isRunning())  {\n            if (this.props.ptnet.canFire(this.props.id)) {\n                return \"#62fa75\"\n            } else if (!this.props.ptnet.transitionFails(this.props.id)) {\n                return \"#fab5b0\"\n            }\n        }\n        return \"#ffffff\"\n    }\n\n\n    onClick(evt) {\n        this.props.ptnet.transitionClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    render() {\n        let t = this.props.ptnet.getObj(this.props.id);\n\n        if (!this.state || !t) {\n            return( <g />)\n        }\n\n        return (\n            <g transform=\"translate(-17,-17)\"\n                onClick={this.onClick}\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onDoubleClick={(evt) => evt.preventDefault() }\n                onContextMenu={(evt) => {\n                    console.log(\"rightclick\");\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                }}\n            >\n            <circle id={this.props.id+\"_handle\"} cx={t.position.x+17} cy={t.position.y+17} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n            <rect\n                className=\"transition\" width=\"34\" height=\"34\" fill={this.getFill()} stroke={this.getStroke()}\n                id={this.props.id} x={t.position.x} y={t.position.y}\n            />\n            <text id={this.props.id+\"[label]\"} x={t.position.x} y={t.position.y-8} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class PVar extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.props.ptnet.varClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    onAltClick(evt) {\n        this.props.ptnet.varAltClick(this.props.id);\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    render() {\n        if (! this.state ) { return(<g/>) }\n        let p = this.props.ptnet.getObj(this.props.id).position;\n\n        let tokenCount = () => {\n            let tokens = this.props.ptnet.vars[this.props.id].initial;\n\n            if (tokens === 0){\n                return // don't show zeros\n            } else if (tokens === 1) {\n                return (<circle cx={p.x} cy={p.y} r=\"2\" id={this.props.id+\"_tokens\"}\n                    fill=\"#000000\"\n                    stroke=\"#000000\" orient=\"0\" className=\"tokens\"/>)\n            } else if (tokens < 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-4} y={p.y+5} className=\"large\">{tokens}</text>)\n            } else if (tokens >= 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-7} y={p.y+5} className=\"small\">{tokens}</text>)\n            }\n        };\n\n        return (\n            <g\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onClick={this.onClick}\n                onContextMenu={this.onAltClick}\n            >\n                <circle id={this.props.id+\"[handle]\"} cx={p.x} cy={p.y} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n                <circle cx={p.x} cy={p.y} r=\"20\"id={this.props.id}\n                        strokeWidth=\"1.5\"\n                        fill=\"#FFFFFF\"\n                        stroke=\"#000000\"\n                        orient=\"0\"\n                        className=\"var\"\n                        shapeRendering=\"auto\"\n                        strokeDasharray=\"4\"\n                />\n                {tokenCount()}\n                <text id={this.props.id+\"[label]\"} x={p.x-20} y={p.y-25} className=\"small\">{this.props.id}</text>\n                <text id={this.props.id+\"[label]\"} x={p.x+25} y={p.y+4} className=\"note\">{this.props.ptnet.vars[this.props.id].description}</text>\n            </g>\n        );\n    }\n};\n","import React, {Component} from 'react';\nimport Place from './Place'\nimport Arc from './Arc'\nimport Transition from './Transition'\nimport PVar from './Var'\n\nclass Net extends Component {\n\n    render() {\n        let p = this.props.ptnet.places;\n        let t = this.props.ptnet.transitions;\n        let v = this.props.ptnet.vars;\n        let place_index = [];\n\n        for (const label in p) {\n            place_index[p[label].offset] = label\n        }\n\n        const vars = Object.keys(v).map((label, index) =>\n            <PVar key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const places = Object.keys(p).map((label, index) =>\n            <Place key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const transitions = Object.keys(t).map((label, index) =>\n            <Transition key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const arcs = [];\n\n        for (const txn in t) {\n            for (const place in t[txn].guards) {\n                let id = txn+'-o'+place;\n                arcs.push(\n                    <Arc key={id}  id={id} ptnet={this.props.ptnet} source={place} target={txn} inhibitor={true} transition={t} />\n                );\n            }\n        }\n\n        for (const txn in t) {\n            for (const i in t[txn].delta) {\n                let v = t[txn].delta[i];\n                if (v > 0) {\n                    let id = txn+'--'+place_index[i];\n                    arcs.push(\n                        <Arc key={id}  id={id} ptnet={this.props.ptnet} source={txn} target={place_index[i]} transition={t}/>\n                    );\n                } else if (v < 0) {\n                    let id = place_index[i]+'-='+txn;\n                    arcs.push(\n                        <Arc key={id} id={id} ptnet={this.props.ptnet} source={place_index[i]} target={txn} transition={t}/>\n                    );\n                }\n            }\n        }\n\n        return (\n            <g id={this.props.schema}>\n                { vars }\n                { arcs }\n                { places }\n                { transitions }\n            </g>\n        );\n    }\n}\n\nexport default Net;\n","export default function NewSimulation(net) {\n    return new StateMachine(net.places, net.transitions);\n}\n\nclass StateMachine {\n    constructor(places, transitions) {\n        this.state = [];\n        this.capacity = [];\n        this.transitions = transitions;\n        this.places = places;\n\n        for (const i in places) {\n            this.capacity[places[i].offset] = places[i].capacity;\n            this.state[places[i].offset] = places[i].initial;\n        }\n\n        this.canFire = this.canFire.bind(this);\n        this.guardsFail = this.guardsFail.bind(this);\n        this.transitionFails = this.transitionFails.bind(this);\n        this.fire = this.fire.bind(this);\n    }\n\n    vadd(state, delta, multiple) {\n        let vout = [];\n        let valid = true;\n        for( const i in state) {\n            vout[i] = state[i] + delta[i] * multiple;\n\n            if (vout[i] < 0 || (this.capacity[i] > 0 && this.capacity[i] > vout[i])) {\n                valid = false\n            }\n        }\n\n        return [vout, valid]\n    }\n\n    guardsFail(oid, multiple) {\n        let res = null;\n        let t = this.transitions[oid];\n        for (const place in t.guards) {\n            res = this.vadd(this.state, t.guards[place], multiple)\n            // guard logic is inverse of normal transition\n            if (res[1]) { // expect vadd to fail\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    transitionFails(oid, multiple) {\n        let t = this.transitions[oid];\n        let res = this.vadd(this.state, t.delta, multiple || 1);\n        return !res[1]\n    }\n\n    canFire(oid, multiple) {\n        if (multiple != null && multiple < 0) {\n            console.error(\"multiple must be positive value got: \" +multiple);\n            return [this.state, false]\n        }\n        let t = this.transitions[oid];\n\n        if (this.guardsFail(oid, multiple || 1)) {\n            return [this.state, false]\n        }\n\n        let res = this.vadd(this.state, t.delta, multiple || 1);\n        return res;\n    }\n\n    fire(oid, multiple, callback) {\n        let res = this.canFire(oid, multiple);\n        if (res[1]) {\n            this.state = res[0];\n            if (callback) { callback() }\n        }\n\n    }\n}\n","import NewSimulation from \"./Simulation\";\n\nexport default function NewPTNet(p) {\n    return new PTNet(p.onLoad, p.onSave, p.onUpdate)\n}\n\nconst HEADER_OFFSET = 60;\n\n// handle editor/simulator actions\nclass PTNet {\n\n    constructor(onLoad, onSave, onUpdate) {\n        // petri-net\n        let pflow = onLoad();\n        this.schema = pflow.schema;\n        this.places = pflow.places;\n        this.transitions = pflow.transitions;\n        this.vars =  pflow.vars || {}; // variables that can be bound to state machine elements\n        this.applyVars(); // overwrite mapped values\n\n        // app state\n        this.mode = 'select';\n        this.update = () => {\n            this.applyVars();\n            onUpdate();\n        };\n        this.save = onSave;\n        this.simulation = null;\n        this.lastSelected = null;\n        this.relatedObjects = null;\n        this.currentSelection = null;\n\n        // accessors\n        this.getMode = this.getMode.bind(this);\n        this.getObj = this.getObj.bind(this);\n        this.getTokenCount = this.getTokenCount.bind(this);\n        this.getCurrentObj = this.getCurrentObj.bind(this);\n        this.getType = this.getType.bind(this);\n\n        // editor\n        this.menuAction = this.menuAction.bind(this);\n        this.positionUpdated = this.positionUpdated.bind(this);\n        this.applyVars = this.applyVars.bind(this);\n\n        // simulation\n        this.isRunning = this.isRunning.bind(this);\n        this.canFire = this.canFire.bind(this);\n        this.guardsFail = this.guardsFail.bind(this);\n        this.transitionFails = this.transitionFails.bind(this);\n        this.fire = this.fire.bind(this);\n        this.isSelected = this.isSelected.bind(this);\n\n        // elements\n        this.editorClick = this.editorClick.bind(this);\n        this.transitionClick=this.transitionClick.bind(this);\n        this.placeClick=this.placeClick.bind(this);\n        this.arcClick=this.arcClick.bind(this);\n        this.arcAltClick=this.arcAltClick.bind(this);\n        this.placeAltClick=this.placeAltClick.bind(this);\n        this.varClick=this.varClick.bind(this);\n        this.varAltClick=this.varAltClick.bind(this);\n    }\n\n    applyVars() {\n        for (const label in this.vars) {\n            const v = this.vars[label];\n\n            for (const i in v['mapping']) {\n                let rule = v['mapping'][i];\n\n                if ('weight' in rule) { // override an Arc weight\n                    let p = this.getObj(rule['weight']['source']);\n                    let t = this.getObj(rule['weight']['target']);\n                    let unit = -1;\n                    if (p && 'delta' in p) { // transition\n                        // swap\n                        t = this.getObj(rule['weight']['source']);\n                        p = this.getObj(rule['weight']['target']);\n                        unit = 1\n                    }\n                    if (t && p) {\n                        t.delta[p.offset] = v.initial*unit;\n                    }\n                }\n\n                if ('initial' in rule)  {\n                    let p = this.getObj(rule['initial']['target']);\n                    if (!p || (p && 'delta' in p)) {\n                        return // can't map values to a transition\n                    }\n                    p.initial = v.initial;\n                }\n            }\n        }\n    }\n\n    getType(obj) {\n        if (obj.target && obj.source) {\n            return \"Arc\"\n        }\n\n        if ( obj.target in this.transitions) {\n            return \"Transition\"\n        }\n\n        if (obj.target in this.vars) {\n            return \"Variable\"\n        }\n\n        if (obj.target in this.places) {\n            return \"Place\"\n        }\n    }\n\n    getCurrentObj() {\n        return this.currentSelection;\n    }\n\n    onObjSelect(obj, callback) {\n        this.currentSelection = obj;\n        let oid = obj.target;\n\n        this.relatedObjects = [];\n        // Search for Var relations\n        for (const i  in this.vars) {\n            let v = this.vars[i];\n            for (const m  in v.mapping) {\n                let x = v.mapping[m];\n                if ('weight' in x) {\n                    if (oid === x.weight['source'] || oid === x.weight['target']) {\n                        this.relatedObjects.push(x.weight);\n                    }\n                } else if('initial' in x) {\n                    if (oid === x.initial['target']) {\n                        this.relatedObjects.push(x.initial);\n                    }\n                } else {\n                    console.error(x)\n                }\n            }\n        }\n        //console.log(this.currentSelection);\n        //console.log(this.relatedObjects);\n\n        callback();\n        this.update()\n    }\n\n    placeSeq() {\n        let x = 0;\n        while (this.places[\"place\"+x]) {\n            x++;\n        }\n        return \"place\"+x;\n    }\n\n    transitionSeq() {\n        let x = 0;\n        while (this.transitions[\"txn\"+x]) {\n            x++;\n        }\n        return \"txn\"+x;\n    }\n\n    varSeq() {\n        let x = 0;\n        while (this.vars[\"var\"+x]) {\n            x++;\n        }\n        return \"var\"+x;\n    }\n\n    isRunning() {\n        return this.mode === 'execute' && this.simulation != null;\n    }\n\n    getTokenCount(oid) {\n        let p = this.getObj(oid);\n        if (!p) {\n            console.error(\"place not found \" +oid);\n            return -1\n        }\n\n        if (this.isRunning()) {\n            return this.simulation.state[p.offset]\n        } else {\n            return p.initial\n        }\n    }\n\n    fire(oid, multiple) {\n        let updated = false;\n        if (this.isRunning()) {\n            this.simulation.fire(oid, multiple || 1, () => {\n                updated = true;\n            });\n        }\n        return updated;\n    }\n\n    canFire(oid, role) {\n        let t = this.getObj(oid);\n        if (role && t.role !== role) {\n            return false;\n        }\n\n        if (this.isRunning() && oid in this.transitions) {\n            let res = this.simulation.canFire(oid);\n            return res[1];\n        } else {\n            return false\n        }\n    }\n\n    guardsFail(oid, multiple) {\n        return this.simulation.guardsFail(oid, multiple)\n    }\n\n    transitionFails(oid, multiple) {\n        return this.simulation.transitionFails(oid, multiple)\n    }\n\n    getMode() {\n        return this.mode\n    }\n\n    getObj(oid) {\n        if (oid in this.transitions) {\n            return this.transitions[oid];\n        } else if (oid in this.places) {\n                return this.places[oid];\n        } else {\n            return this.vars[oid];\n        }\n    }\n\n    positionUpdated(el, evt, callback) {\n        if (['execute', 'delete'].indexOf(this.mode) >= 0 ) {\n            return\n        }\n\n        let obj = this.getObj(el.props.id);\n        obj.position.x = obj.position.x + evt.movementX;\n        obj.position.y = obj.position.y + evt.movementY;\n        this.update();\n\n        if (callback) {\n            callback()\n        }\n    }\n\n    menuAction(action, callback) {\n        if (this.mode === action) {\n            action = 'select'\n        }\n        //console.log(this.mode, \"->\", action);\n        this.mode=action;\n\n        switch(action) {\n            case \"execute\": {\n                this.simulation = NewSimulation(this);\n                //console.log(this.simulation);\n                break;\n            }\n            default: {\n                //console.error(\"unknown menuAction: \"+action);\n            }\n        }\n\n        this.update();\n        if (callback) {\n            callback(this.mode);\n        }\n    }\n\n    emptyVector() {\n        return Object.keys(this.places).map(() => {\n            return 0\n        })\n    }\n\n    addPlace(coords) {\n        let newOffset = Object.keys(this.places).length;\n        this.places[this.placeSeq()] = {\n            initial: 0,\n            capacity: 0,\n            offset: newOffset,\n            // KLUDGE this allows for the size of the menu bar\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n        };\n\n        // extend delta vector size\n        for (const oid in this.transitions) {\n            this.transitions[oid].delta[newOffset] = 0;\n        }\n\n        return true;\n    }\n\n    addTransition(coords) {\n        let oid = this.transitionSeq();\n        this.transitions[oid] = {\n            role: 'default',\n            delta: this.emptyVector(),\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n            guards: {}\n        };\n        return true;\n    }\n\n    editorClick(evt) {\n        let updated = false;\n        switch (this.mode) {\n            case 'place': {\n                updated = this.addPlace({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            case 'transition': {\n                updated = this.addTransition({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            case 'var': {\n                updated = this.addVar({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            default: {\n            }\n        }\n        evt.stopPropagation();\n        if (updated) { this.update() }\n    }\n\n    validArc(begin, end) {\n        return (\n            (begin in this.places && end in this.transitions) ||\n            (begin in this.transitions && end in this.places)\n        )\n    }\n\n    addArc(begin, end) {\n        let t = null;\n        let p = null;\n        let weight = 0;\n\n        if (begin in this.transitions) {\n            weight = 1;\n            t = this.transitions[begin];\n            p = this.places[end];\n        } else {\n            weight = -1;\n            t = this.transitions[end];\n            p = this.places[begin];\n        }\n\n        t.delta[p.offset] = weight;\n    }\n\n    pairSelected(begin, end) {\n        let updated = false;\n\n        switch (this.mode) {\n            case 'arc': {\n                if (this.validArc(begin, end)) {\n                    //console.log(begin, \"->\", end);\n                    this.addArc(begin, end);\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        this.lastSelected = null;\n        return updated;\n    }\n\n    selectObj(oid) {\n        this.currentSelection = {target: oid};\n\n        if (!this.lastSelected) {\n            this.lastSelected = oid;\n        } else {\n            this.pairSelected(this.lastSelected, oid)\n        }\n    }\n\n    delPlace(oid) {\n        let offset = this.places[oid].offset;\n        for (const txn in this.transitions) {\n            delete this.transitions[txn].delta[offset];\n            delete this.transitions[txn].guards[oid];\n        }\n        delete this.places[oid];\n    }\n\n    delArc(obj) {\n        let p = null;\n        let t = null;\n\n        if (obj.source in this.places) {\n            p = obj.source;\n            t = obj.target;\n        } else {\n            t = obj.source;\n            p = obj.target;\n        }\n\n        let offset = this.places[p].offset;\n        this.transitions[t].delta[offset] = 0;\n        delete this.transitions[t].guards[p];\n    }\n\n    placeAltClick(oid) {\n        let updated = false;\n        switch (this.mode) {\n            case 'token': {\n                let p = this.getObj(oid);\n                if (p.initial > 0) {\n                    p.initial--;\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n    }\n\n    placeClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'token': {\n                    this.getObj(oid).initial++;\n                    break;\n                }\n                case 'delete': {\n                    this.delPlace(oid);\n                    break;\n                }\n                default: {\n                    this.selectObj(oid);\n                }\n            }\n        });\n    }\n\n    transitionClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'execute': {\n                    this.fire(oid);\n                    break;\n                }\n                case 'delete': {\n                    delete this.transitions[oid];\n                    this.currentSelection = null;\n                    break;\n                }\n                case 'arc': {\n                    this.selectObj(oid);\n                    break;\n                }\n                default: {\n                    this.currentSelection = { target: oid };\n                }\n            }\n        });\n\n    }\n\n    // { source: <str>, target: <str> }\n    isSelected(obj) {\n        if (! this.currentSelection) {\n            return false\n        }\n\n        let type = this.getType(this.currentSelection);\n        switch (this.mode) {\n            case 'execute': {\n                return false\n            }\n            case 'arc': {\n                if (this.lastSelected === obj.target) {\n                    return true\n                }\n                break;\n            }\n            default: {\n                if (type === 'Variable') {\n                    // check for relations\n                    for (const v in this.vars[this.currentSelection.target].mapping) {\n                        let m = this.vars[this.currentSelection.target].mapping[v];\n                        let match = {};\n\n                        if ('weight' in m) {\n                            match = m.weight\n                        } else if ('initial' in m) {\n                            match = m.initial\n                        } else {\n                            return false\n                        }\n\n                        if ('source' in obj && match.source) {\n                            if (obj['source'] === match.source && obj['target'] === match.target) {\n                                return true\n                            }\n                        } else {\n                            if (obj['target'] === match.target) {\n                                return true\n                            }\n\n                        }\n                    }\n                } else {\n                    if ('source' in obj) {\n                        return this.currentSelection['source'] === obj.source && this.currentSelection['target'] === obj.target\n                    }\n\n                    if (this.currentSelection['source'] === obj.target || this.currentSelection['target'] === obj.target) {\n                        return true\n                    }\n                }\n                return false;\n            }\n        }\n    }\n\n    toggleInhibitor(arc) {\n        if (arc.source in this.transitions) {\n            return false;\n        }\n\n        let label = arc.source;\n        let p = this.getObj(arc.source);\n        let t = this.getObj(arc.target);\n\n        if (t.delta[p.offset] !== 0) {\n            t.guards[label] = this.emptyVector();\n            t.guards[label][p.offset] = t.delta[p.offset];\n            t.delta[p.offset] = 0;\n        } else {\n            // REVIEW: do we need to invert sign?\n            t.delta[p.offset] = t.guards[label][p.offset];\n            delete t.guards[label];\n        }\n        return true;\n    }\n\n    addGuardToken(t, pid, offset, delta) {\n        let v = t.guards[pid][offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.guards[pid][offset] = v;\n        return true;\n    }\n\n    addArcToken(obj, delta) {\n        let t = null;\n        let p = null;\n        let pid = null;\n        if (obj.source in this.transitions) {\n            t = this.getObj(obj.source);\n            p = this.getObj(obj.target);\n            pid = obj.target;\n        } else {\n            t = this.getObj(obj.target);\n            p = this.getObj(obj.source);\n            pid = obj.source;\n        }\n\n        if (t.delta[p.offset] === 0) {\n            return this.addGuardToken(t, pid, p.offset, delta)\n        }\n\n        let v = t.delta[p.offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.delta[p.offset] = v;\n        return true;\n    }\n\n    arcClick(obj) {\n        this.onObjSelect(obj, ()  => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addArcToken(obj, 1);\n                    break;\n                }\n                case 'delete': {\n                    if (obj.source in this.transitions) {\n                        this.delArc(obj)\n                    } else {\n                        this.delArc(obj)\n                    }\n                    break;\n                }\n                case 'var': {\n                    // TODO: add var mapping\n                    break;\n                }\n                default: {\n                }\n            }\n        });\n    }\n\n    arcAltClick(obj) {\n        this.onObjSelect(obj, () => {\n            switch (this.mode) {\n                case 'arc': {\n                    this.toggleInhibitor(obj);\n                    break;\n                }\n                case 'token': {\n                    this.addArcToken(obj, -1);\n                    break;\n                }\n                default: {\n                }\n            }\n            this.update()\n        })\n\n    }\n\n    addVar(coords) {\n        let newOffset = Object.keys(this.vars).length;\n        this.vars[this.varSeq()] = {\n            initial: 0,\n            offset: newOffset,\n            // KLUDGE this allows for the size of the menu bar\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n        };\n\n        return true;\n    }\n\n    addVarToken(oid, multiple) {\n        this.vars[oid].initial+= multiple || 1;\n        return true\n    }\n\n    varClick(oid) {\n        this.onObjSelect({  target: oid}, () => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addVarToken(oid, 1);\n                    break;\n                }\n                default: {\n                }\n            }\n        })\n    }\n\n    varAltClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addVarToken(oid, -1);\n                    break;\n                }\n                default: {\n                }\n            }\n        })\n    }\n\n}\n","\n// initialMarking format is \"Default,0\"\n\nvar TEMPLATES = {};\nvar PSHORT = 'pshort';\n\n// set initial variables\n// these values override the inputs from the pflow file\nTEMPLATES[PSHORT] = (pf) => {\n\n    // REVIEW: if we wanted to calculate these values\n    // data would be injected from a mainnet\n\n    let collateral = 5; // USD shorted at rate = 5/7\n    let tokens = 7; // number of tokens being shorted\n    let rate = 2;\n    let rate_in_block_m = rate/tokens; // current USD value of short contract\n\n    // NOTE: aside from binding values to the petri-net\n    // this is the only calculation made per transaction\n    //\n    // calculate market value\n    let value = 2 * collateral - tokens * rate_in_block_m;\n\n    if (value <= 0) {\n        value = 0;\n        console.log(\"short halted due to insufficent value\")\n    }\n\n    pf.vars = {\n        \":COLLATERAL:\": {\n            initial: collateral,\n            offset: 0,\n            position: { x: 700, y: 100},\n            description: \"Amount USD on deposit at block N\",\n            mapping: [\n                {weight: { source: \"INPUT\", target: \"COLLATERAL\"}},\n                {weight: { source: \"COLLATERAL\", target: \"COVER\"}},\n                {initial: { target: \"COLLATERAL\"}},\n            ]\n        },\n        \":TOKENS:\": {\n            initial: tokens,\n            offset: 1,\n            position: { x: 700, y: 180},\n            description: \"Y: pXYZ shorted at block N\",\n            mapping: [\n                {weight: { source: \"INPUT\", target: \"TOKENS\"}},\n                {weight: { source: \"TOKENS\", target: \"COVER\"}},\n                {initial: {target: \"TOKENS\"}},\n            ]\n        },\n        \":VALUE:\": {\n            initial: value,\n            offset: 2,\n            position: { x: 700, y: 260},\n            description: \"USD VALUE = 2 * COLLATERAL - Y * (rate-of-pXYZ-in-block-M = \"+rate+\"/\"+tokens+\")\",\n            mapping: [\n                {weight: { source: \"COVER\", target: \"OUTPUT\"}},\n                {weight: { source: \"VALUE\", target: \"COVER\"}},\n                {initial: { target: \"VALUE\"}},\n            ]\n        },\n    };\n\n    return pf\n};\n\nexport default function OpenTemplate(ptNet, schema) {\n    if (!(schema in TEMPLATES)) {\n        console.log(\"missing template for: \"+ schema);\n        return ptNet\n    }\n    return TEMPLATES[schema](ptNet);\n}\n\n\n","import React, { Component } from 'react'\nimport Toolbar from \"./Toolbar\";\nimport Properties from \"./Properties\";\nimport Menu from \"./Menu\";\nimport Net from './Net';\nimport NewPTNet from \"./PTNet\";\nimport OpenTemplate from \"./Templates\";\n\nexport default class Editor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.state.editorClick(evt);\n    }\n\n    componentDidMount() {\n        this.setState(\n            NewPTNet({\n                onLoad: () => {\n                    let pf = this.props.getPflow();\n                    return OpenTemplate(pf, pf.schema)\n               },\n                onSave: this.props.setPflow,\n                onUpdate: () => {\n                    this.setState(this.state)\n                }\n            })\n        )\n    }\n\n    render() {\n\n        if (! this.state) {\n            return <React.Fragment/>\n        }\n\n        return (\n            <React.Fragment>\n                <Menu ptnet={this.state} />\n                <Toolbar ptnet={this.state}/>\n                <svg width={window.innerWidth}\n                     height={500}\n                     onContextMenu={(evt) => evt.preventDefault() }\n                     onClick={this.onClick} >\n                    <defs>\n                        <marker id=\"markerArrow1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                            <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                            <path d=\"M2,2 L2,11 L10,6 L2,2\" />\n                        </marker>\n                        <marker id=\"markerInhibit1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                            <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                            <circle cx=\"5\" cy=\"6.5\" r={4}></circle>\n                        </marker>\n                    </defs>\n                    <Net ptnet={this.state} />\n                </svg>\n                < hr/>\n                <Properties ptnet={this.state} />\n            </React.Fragment>\n        )\n      }\n}","import React, {Component} from 'react';\nimport OpenPflow from \"./Pflow/Pflow\";\nimport Editor from './Pflow/Editor';\nimport './App.css'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.getPflow = this.getPflow.bind(this);\n        this.setPflow = this.setPflow.bind(this);\n    }\n\n    getPflow() {\n        return JSON.parse(JSON.stringify(this.state['ptnet']))\n    }\n\n    setPflow(ptnet) {\n        this.setState({\n            ptnet: ptnet\n        })\n    }\n\n    open(schema) {\n        OpenPflow(schema, (ptnet) => {\n            this.setPflow(ptnet)\n        })\n    }\n\n    componentDidMount() {\n        this.open(\"pshort\");\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment />)\n        }\n\n        return (\n            <Editor getPflow={this.getPflow} setPflow={this.setPflow} />\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}