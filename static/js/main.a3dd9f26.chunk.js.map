{"version":3,"sources":["Pflow/Pflow.js","Pflow/Toolbar.js","Pflow/Properties.js","Pflow/Menu.js","Pflow/Drag.js","Pflow/Place.js","Pflow/Arc.js","Pflow/Transition.js","Pflow/Var.js","Pflow/Net.js","Pflow/Simulation.js","Pflow/PTNet.js","Pflow/Editor.js","App.js","serviceWorker.js","index.js"],"names":["getCoords","obj","x","parseInt","y","getId","id","getWeight","arc","PTNet","schema","net","this","places","transitions","PFlow","pnml","_pnml","_place_ids","_place_labels","_transition_ids","size","Object","keys","length","v","i","subnet","n","loadSubnets","placeIn","entries","p","label","offset","capacity","initial","tokens","position","t","role","delta","emptyVector","guards","a","pkey","tkey","unit","isTransition","place_offset","place_label","type","g","document","r","name","tid","ACTIONS","Toolbar","props","menuAction","bind","action","ptnet","mode","setState","getMode","state","Fragment","actions","map","style","color","key","onClick","onContextMenu","evt","preventDefault","className","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Properties","handleChange","getData","tab","val","getCurrentObj","data","selected","getType","vars","source","getObj","target","classes","Paper","square","Tabs","value","indicatorColor","textColor","onChange","Tab","maxWidth","Typography","variant","JSON","stringify","ButtonAppBar","AppBar","href","rel","dropdownLink","Draggable","dragging","positionUpdated","stopPropagation","window","innerWidth","isSelected","Place","onAltClick","placeClick","placeAltClick","onMouseDown","startDrag","onMouseUp","endDrag","onMouseMove","cx","cy","getHandleWidth","fill","stroke","strokeWidth","getStroke","orient","shapeRendering","getTokenCount","tokenCount","Arc","getMarker","arcClick","getArcDef","arcAltClick","x1","y1","x2","y2","midX","midY","offsetX","offsetY","Math","abs","weight","inhibitor","markerEnd","Transition","isRunning","canFire","transitionFails","transitionClick","transform","onDoubleClick","console","log","width","height","getFill","PVar","varClick","varAltClick","strokeDasharray","description","Net","place_index","index","arcs","txn","place","push","transition","StateMachine","guardsFail","fire","multiple","vout","valid","oid","vadd","error","callback","res","onLoad","onSave","onUpdate","pflow","applyVars","update","save","simulation","lastSelected","currentSelection","editorClick","rule","updated","el","indexOf","movementX","movementY","coords","newOffset","placeSeq","transitionSeq","addPlace","clientX","clientY","addTransition","addVar","begin","end","validArc","addArc","pairSelected","onObjSelect","delPlace","selectObj","pid","addGuardToken","addArcToken","delArc","toggleInhibitor","varSeq","addVarToken","Editor","pf","getPflow","mapping","setPflow","markerWidth","markerHeight","refX","refY","d","App","parse","success","xhr","XMLHttpRequest","open","onload","e","readyState","status","parseString","responseText","err","pflow_json","reindex","statusText","onerror","send","OpenPflow","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oXAYA,SAASA,EAAUC,GAEf,MAAO,CAAEC,EAAGC,SAASF,EAAIC,GAAIE,EAAGD,SAASF,EAAIG,IAGjD,SAASC,EAAMJ,GACX,OAAOA,EAAIK,GAAG,GAOlB,SAASC,EAAUC,GACf,OAAOL,SAASK,EAAG,aAAiB,I,IAoClCC,EACF,WAAYC,EAAQC,GAAM,oBACtBC,KAAKF,OAASC,EAAID,OAClBE,KAAKC,OAASF,EAAIE,OAClBD,KAAKE,YAAcH,EAAIG,aAMzBC,E,WACF,WAAYL,EAAQM,GAAM,oBACtBJ,KAAKF,OAASA,EACdE,KAAKC,OAAS,GACdD,KAAKE,YAAc,GAGnBF,KAAKK,MAAQD,EACbJ,KAAKM,WAAa,GAClBN,KAAKO,cAAgB,GACrBP,KAAKQ,gBAAkB,G,0DAMvB,IAFA,IAAIC,EAAOC,OAAOC,KAAKX,KAAKC,QAAQW,OAChCC,EAAI,GACCC,EAAI,EAAGA,EAAIL,EAAMK,IACtBD,EAAEC,GAAK,EAEX,OAAOD,I,kCAGCE,GAER,GAAGA,EAAOA,OAAQ,CAAC,IAAD,uBACd,YAAgBA,EAAOA,OAAvB,+CAA+B,CAAC,IAArBC,EAAoB,QAC3BhB,KAAKiB,YAAYD,IAFP,mFAFF,IA1FJE,EA0FI,uBAQhB,YAAqBH,EAAM,MAAUI,UAArC,+CAAgD,CAAC,IAAD,6BAApCL,EAAoC,KAAjCM,EAAiC,KAC5CpB,KAAKM,WAAWb,EAAM2B,IAAMN,EAC5Bd,KAAKO,cAAcd,EAAM2B,IAAMA,EAAEC,MAEjCrB,KAAKC,OAAOmB,EAAEC,OAAS,CACnBC,OAAQR,EACRS,SAnGL,EAoGKC,SAzGIN,EAyGgBE,EAxGzB7B,SAAS2B,EAAQO,OAAO,KAyGnBC,SAAUtC,EAAUgC,KAhBZ,6GAoBhB,YAAgBL,EAAM,WAAtB,+CAAsC,CAAC,IAA5BY,EAA2B,QAClC3B,KAAKQ,gBAAgBf,EAAMkC,IAAMA,EAAEN,MACnCrB,KAAKE,YAAYyB,EAAEN,OAAS,CACxBO,KAAM,UACNC,MAAO7B,KAAK8B,cACZJ,SAAUtC,EAAUuC,GACpBI,OAAQ,KA1BA,6GA8BhB,YAAiBhB,EAAM,IAAvB,+CAAgC,CAAC,IAArBiB,EAAoB,QACxBC,EAAO,GACPC,EAAO,GACPC,EAAO,KAEPnC,KAAKoC,aAAaJ,EAAC,cAAkB,KAErCE,EAAO,gBACPD,EAAO,WACPE,GAAqB,EAAdxC,EAAUqC,KAGjBE,EAAO,WACPD,EAAO,gBACPE,EAAOxC,EAAUqC,IAKrB,IAAIL,EAAI3B,KAAKE,YAAYF,KAAKQ,gBAAgBwB,EAAEE,KAC5CG,EAAerC,KAAKM,WAAW0B,EAAEC,IACjCK,EAActC,KAAKO,cAAcyB,EAAEC,IAEvC,GArHe,cAqHCD,EArHbO,KAAK,GAqHY,CAChB,IAAIC,EAAIxC,KAAK8B,cAEbU,EAAEH,GAAgBF,EAClBR,EAAEI,OAAOO,GAAeE,OAExBb,EAAEE,MAAMQ,GAAgBF,GA3DhB,qF,mCAiEPd,GACT,OAAIA,KAASrB,KAAKQ,kB,gCAOX,IAAD,uBACN,YAAgBR,KAAKK,MAAMoC,SAAX,OAAhB,+CAA+C,CAAC,IAArCzB,EAAoC,QAC3ChB,KAAKiB,YAAYD,IAFf,6GAKN,YAAgBhB,KAAKK,MAAMoC,SAAX,MAA6B,GAAGb,KAAhD,+CAAsD,CAAC,IAA5Cc,EAA2C,QAC5CrB,EAAgBqB,EAvJnBC,KAAK,GAsJ0C,uBAElD,YAAkBD,EAAC,aAAnB,+CAAqC,CAAC,IAA3BE,EAA0B,QACjC5C,KAAKE,YAAYF,KAAKQ,gBAAgBoC,IAAMhB,KAAOP,GAHL,oFALhD,uF,KCrKRwB,EAAU,CACZ,SACA,SACA,MACA,QACA,aACA,MACA,QACA,WAGiBC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAFH,E,wEAKRC,GAAS,IAAD,OACflD,KAAK+C,MAAMI,MAAMH,WAAWE,GAAQ,SAACE,GACjC,EAAKC,SAAS,CAAED,KAAMA,S,0CAK1BpD,KAAKqD,SAAS,CAAED,KAAMpD,KAAK+C,MAAMI,MAAMG,c,+BAGjC,IAAD,OACL,IAAMtD,KAAKuD,MACP,OAAQ,kBAAC,IAAMC,SAAP,MAGZ,IAAIC,EAAUZ,EAAQa,KAAI,SAACrC,GACvB,IAAIsC,EAAQ,CAAEC,MAAO,QAIrB,OAHI,EAAKL,MAAMH,OAAS/B,IACpBsC,EAAQ,CAAEC,MAAO,UAEb,4BAAQC,IAAKxC,EAAOsC,MAAOA,EAAOhB,KAAMtB,EAC5CyC,QAAS,kBAAM,EAAKd,WAAW3B,IAC/B0C,cAAe,SAACC,GAAD,OAASA,EAAIC,mBAC9B5C,MAGN,OACI,kBAAC,IAAMmC,SAAP,KACI,yBAAKU,UAAU,OAAOd,KAAMpD,KAAK+C,MAAMI,MAAMC,MAA7C,IAAqDK,EAArD,KACA,kC,GAnCqBU,a,6CCN/BC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,OAIGK,E,YACjB,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KACD+B,aAAe,EAAKA,aAAa7B,KAAlB,gBACpB,EAAK8B,QAAU,EAAKA,QAAQ9B,KAAb,gBAHA,E,iFAOfjD,KAAKqD,SAAS,CAAE2B,IAAK,M,mCAGZhB,EAAKiB,GACdjF,KAAKqD,SAAS,CAAE2B,IAAKC,M,gCAIrB,IAAI5F,EAAMW,KAAK+C,MAAMI,MAAM+B,gBAEvBC,EAAO,CACPC,SAAU/F,GAGd,IAAMA,EACF,MAAO,CAAEkD,KAAM,UAInB,GADA4C,EAAK5C,KAAOvC,KAAK+C,MAAMI,MAAMkC,QAAQhG,IAChCA,EACD,OAAOW,KAAK+C,MAAMI,MAAMmC,KAG5B,OAAQtF,KAAKuD,MAAMyB,KACf,KAAK,EACDG,EAAKI,OAASvF,KAAK+C,MAAMI,MAAMqC,OAAOnG,EAAG,QACzC8F,EAAKM,OAASzF,KAAK+C,MAAMI,MAAMqC,OAAOnG,EAAG,QACzC,MAEJ,KAAK,EACD8F,EAAKG,KAAMtF,KAAK+C,MAAMI,MAAMmC,KAOpC,OAAOH,I,+BAIP,IAAMnF,KAAKuD,MACP,OAAO,kBAAC,IAAMC,SAAP,MAGX,IAAIkC,EAAUtB,EACVe,EAAOnF,KAAK+E,UAEhB,OACI,kBAACY,EAAA,EAAD,CAAOC,QAAM,GACT,kBAACC,EAAA,EAAD,CACIC,MAAO9F,KAAKuD,MAAMyB,IAClBe,eAAe,UACfC,UAAU,UACVC,SAAUjG,KAAK8E,cACf,kBAACoB,EAAA,EAAD,CAAK7E,MAAO8D,EAAK5C,MAAQ,WACzB,kBAAC2D,EAAA,EAAD,CAAK7E,MAAM,eAGf,yBAAKsC,MAAO,CAAEwC,SAAU,SACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKnC,UAAWwB,EAAQd,OACxC,6BACC0B,KAAKC,UAAUpB,EAAM,KAAM,c,GAtEZhB,a,oCCZlCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACjCC,KAAM,CACEC,SAAU,GAElBC,WAAY,CACJC,YAAaJ,EAAMK,QAAQ,IAEnCC,MAAO,CACCJ,SAAU,OAIT,SAASgC,IAClB,IAAMd,EAAUtB,IAEhB,OACQ,yBAAKF,UAAWwB,EAAQnB,MACrB,kBAACkC,EAAA,EAAD,CAAQ/E,SAAS,UACd,kBAAC,IAAD,KACG,kBAAC0E,EAAA,EAAD,CAAYC,QAAQ,KAAKnC,UAAWwB,EAAQd,OAA5C,gBAGC,uBACI8B,KAAK,4CACLjB,OAAO,SACPkB,IAAI,sBACJzC,UAAWwB,EAAQkB,cAJvB,IAKE,kBAAC,IAAD,MALF,Q,IC3BHC,E,2MAiCjBC,SAAW,SAAC9C,GACJ,EAAKT,MAAMuD,UACX,EAAK/D,MAAMI,MAAM4D,gBAAjB,eAAuC/C,GAE3CA,EAAIgD,mB,gFAjCJ,OAAIhH,KAAKuD,MAAMuD,SACc,EAAlBG,OAAOC,WAEP,K,kCAKX,OAAIlH,KAAK+C,MAAMI,MAAMgE,WAAWnH,KAAK+C,MAAMrD,IAChC,UAEA,Y,0CAKXM,KAAKqD,SAAS,CAAEyD,UAAU,M,gCAGpB9C,GACNhE,KAAKqD,SAAS,CAAEyD,UAAU,IAC1B9C,EAAIgD,oB,8BAGAhD,GACJhE,KAAKqD,SAAS,CAAEyD,UAAU,IAC1B9C,EAAIgD,sB,GA9B2B7C,aCClBiD,E,YACjB,WAAYrE,GAAQ,IAAD,8BACf,4CAAMA,KACDe,QAAU,EAAKA,QAAQb,KAAb,gBACf,EAAKoE,WAAa,EAAKA,WAAWpE,KAAhB,gBAHH,E,qEAMXe,GACJhE,KAAK+C,MAAMI,MAAMmE,WAAWtH,KAAK+C,MAAMrD,IACvCsE,EAAIgD,oB,iCAGGhD,GACPhE,KAAK+C,MAAMI,MAAMoE,cAAcvH,KAAK+C,MAAMrD,IAC1CsE,EAAIC,iBACJD,EAAIgD,oB,+BAGE,IAAD,OACL,IAAMhH,KAAKuD,MAAU,OAAO,4BAC5B,IAAInC,EAAIpB,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAMrD,IAAIgC,SAgB/C,OACI,uBACI8F,YAAc,SAACxD,GAAD,OAAS,EAAKyD,UAAUzD,IACtC0D,UAAY,SAAC1D,GAAD,OAAS,EAAK2D,QAAQ3D,IAClC4D,YAAc,SAAC5D,GAAD,OAAS,EAAK8C,SAAS9C,IACrCF,QAAS9D,KAAK8D,QACdC,cAAe/D,KAAKqH,YAEpB,4BAAQ3H,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWmI,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAG1C,KAAK+H,iBAAkBC,KAAK,cAAcC,OAAO,gBAC3G,4BAAQJ,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAE,KAAIhD,GAAIM,KAAK+C,MAAMrD,GACvCwI,YAAY,MAAMF,KAAK,UAAUC,OAAQjI,KAAKmI,YAAaC,OAAO,IAClElE,UAAU,QACVmE,eAAe,SA1Bd,WACb,IAAI5G,EAAS,EAAKsB,MAAMI,MAAMmF,cAAc,EAAKvF,MAAMrD,IAEvD,GAAe,IAAX+B,EAEG,OAAe,IAAXA,EACC,4BAAQoG,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAE,IAAIhD,GAAI,EAAKqD,MAAMrD,GAAG,UAAWsI,KAAK,UAAUC,OAAO,UAAUG,OAAO,IAAIlE,UAAU,WACnHzC,EAAS,GACR,0BAAM/B,GAAI,EAAKqD,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,EAAGE,EAAG4B,EAAE5B,EAAE,EAAG0E,UAAU,SAASzC,GAC3EA,GAAU,GACT,0BAAM/B,GAAI,EAAKqD,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,EAAGE,EAAG4B,EAAE5B,EAAE,EAAG0E,UAAU,SAASzC,QAD/E,EAmBF8G,GACD,0BAAM7I,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,GAAIE,EAAG4B,EAAE5B,EAAE,GAAI0E,UAAU,SAASlE,KAAK+C,MAAMrD,S,GAnDpEmH,GCDd2B,E,YAEjB,WAAYzF,GAAQ,IAAD,8BACf,4CAAMA,KACDe,QAAU,EAAKA,QAAQb,KAAb,gBACf,EAAKoE,WAAa,EAAKA,WAAWpE,KAAhB,gBAClB,EAAKwF,UAAY,EAAKA,UAAUxF,KAAf,gBAJF,E,yEAQf,MAAO,CAACsC,OAAQvF,KAAK+C,MAAMwC,OAAQE,OAAQzF,KAAK+C,MAAM0C,U,8BAGlDzB,GACJA,EAAIgD,kBACJhH,KAAK+C,MAAMI,MAAMuF,SAAS1I,KAAK2I,e,iCAGxB3E,GACPA,EAAIgD,kBACJhD,EAAIC,iBACJjE,KAAK+C,MAAMI,MAAMyF,YAAY5I,KAAK2I,e,kCAIlC,OAAI3I,KAAK+C,MAAL,UACO,uBAEA,uB,+BAKX,IAAIwC,EAASvF,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAMwC,QAC5CE,EAASzF,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAM0C,QAChD,IAAMF,IAAYE,EACd,OAAQ,4BAGZ,IAAIoD,EAAGtD,EAAO7D,SAASpC,EACnBwJ,EAAGvD,EAAO7D,SAASlC,EACnBuJ,EAAGtD,EAAO/D,SAASpC,EACnB0J,EAAGvD,EAAO/D,SAASlC,EAEnByJ,GAAQF,EAAGF,GAAI,EACfK,GAAQF,EAAGF,GAAI,EAAI,EACnBK,EAAQ,EACRC,EAAQ,EAERC,KAAKC,IAAIP,EAAGE,GAAQ,IACpBE,EAAQ,GAGRE,KAAKC,IAAIN,EAAGE,GAAQ,IACpBE,EAAQ,GAGZ,IAAIG,EAAS,EAeb,OAZQA,EAFJvJ,KAAK+C,MAAMyG,UACP,UAAWjE,EACFA,EAAOxD,OAAO/B,KAAK+C,MAAM0C,QAAQA,EAAOnE,QAExCmE,EAAO1D,OAAO/B,KAAK+C,MAAMwC,QAAQA,EAAOjE,QAGjD,UAAWiE,EACFA,EAAM,MAAUE,EAAOnE,QAEvBmE,EAAM,MAAUF,EAAOjE,QAKpC,uBACIyC,cAAe/D,KAAKqH,YAEpB,0BACIY,OAAO,UACPwB,UAAWzJ,KAAKyI,YAChB/I,GAAIM,KAAK+C,MAAMrD,GACfmJ,GAAIA,EAAIC,GAAIA,EACZC,GAAIA,EAAIC,GAAIA,IAEhB,0BAAMtJ,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWJ,EAAG2J,EAAKE,EAAS3J,EAAG0J,EAAKE,EAASlF,UAAU,SAASmF,KAAKC,IAAIC,IACjG,4BAAQ7J,GAAIM,KAAK+C,MAAMrD,GAAG,WACtBgD,EAAG,GAAImF,GAAIoB,EAAMnB,GAAIoB,EAAMlB,KAAK,cAAcC,OAAO,cACrDnE,QAAS9D,KAAK8D,e,GAtFDK,aCCZuF,E,YACjB,WAAY3G,GAAQ,IAAD,8BACf,4CAAMA,KACDe,QAAU,EAAKA,QAAQb,KAAb,gBAFA,E,uEAMf,GAAIjD,KAAK+C,MAAMI,MAAMwG,YAAc,CAC/B,GAAI3J,KAAK+C,MAAMI,MAAMyG,QAAQ5J,KAAK+C,MAAMrD,IACpC,MAAO,UACJ,IAAKM,KAAK+C,MAAMI,MAAM0G,gBAAgB7J,KAAK+C,MAAMrD,IACpD,MAAO,UAGf,MAAO,Y,8BAIHsE,GACJhE,KAAK+C,MAAMI,MAAM2G,gBAAgB9J,KAAK+C,MAAMrD,IAC5CsE,EAAIgD,oB,+BAGE,IAAD,OACDrF,EAAI3B,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAMrD,IAE3C,OAAKM,KAAKuD,OAAU5B,EAKhB,uBAAGoI,UAAU,qBACTjG,QAAS9D,KAAK8D,QACd0D,YAAc,SAACxD,GAAD,OAAS,EAAKyD,UAAUzD,IACtC0D,UAAY,SAAC1D,GAAD,OAAS,EAAK2D,QAAQ3D,IAClC4D,YAAc,SAAC5D,GAAD,OAAS,EAAK8C,SAAS9C,IACrCgG,cAAe,SAAChG,GAAD,OAASA,EAAIC,kBAC5BF,cAAe,SAACC,GACZiG,QAAQC,IAAI,cACZlG,EAAIC,iBACJD,EAAIgD,oBAGZ,4BAAQtH,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWmI,GAAIlG,EAAED,SAASpC,EAAE,GAAIwI,GAAInG,EAAED,SAASlC,EAAE,GAAIkD,EAAG1C,KAAK+H,iBAAkBC,KAAK,cAAcC,OAAO,gBACnI,0BACI/D,UAAU,aAAaiG,MAAM,KAAKC,OAAO,KAAKpC,KAAMhI,KAAKqK,UAAWpC,OAAQjI,KAAKmI,YACjFzI,GAAIM,KAAK+C,MAAMrD,GAAIJ,EAAGqC,EAAED,SAASpC,EAAGE,EAAGmC,EAAED,SAASlC,IAEtD,0BAAME,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWJ,EAAGqC,EAAED,SAASpC,EAAGE,EAAGmC,EAAED,SAASlC,EAAE,EAAG0E,UAAU,SAASlE,KAAK+C,MAAMrD,KArB7F,gC,GA3BoBmH,GCAnByD,E,YACjB,WAAYvH,GAAQ,IAAD,8BACf,4CAAMA,KACDe,QAAU,EAAKA,QAAQb,KAAb,gBACf,EAAKoE,WAAa,EAAKA,WAAWpE,KAAhB,gBAHH,E,qEAMXe,GACJhE,KAAK+C,MAAMI,MAAMoH,SAASvK,KAAK+C,MAAMrD,IACrCsE,EAAIgD,oB,iCAGGhD,GACPhE,KAAK+C,MAAMI,MAAMqH,YAAYxK,KAAK+C,MAAMrD,IACxCsE,EAAIC,iBACJD,EAAIgD,oB,+BAGE,IAAD,OACL,IAAMhH,KAAKuD,MAAU,OAAO,4BAC5B,IAAInC,EAAIpB,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAMrD,IAAIgC,SACrC1B,KAAK+C,MAAMI,MAAMqC,OAAOxF,KAAK+C,MAAMrD,IAAIgC,SAkBjD,OACI,uBACI8F,YAAc,SAACxD,GAAD,OAAS,EAAKyD,UAAUzD,IACtC0D,UAAY,SAAC1D,GAAD,OAAS,EAAK2D,QAAQ3D,IAClC4D,YAAc,SAAC5D,GAAD,OAAS,EAAK8C,SAAS9C,IACrCF,QAAS9D,KAAK8D,QACdC,cAAe/D,KAAKqH,YAEpB,4BAAQ3H,GAAIM,KAAK+C,MAAMrD,GAAG,WAAYmI,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAG1C,KAAK+H,iBAAkBC,KAAK,cAAcC,OAAO,gBAC5G,4BAAQJ,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAE,KAAIhD,GAAIM,KAAK+C,MAAMrD,GACvCwI,YAAY,MACZF,KAAK,UACLC,OAAO,UACPG,OAAO,IACPlE,UAAU,MACVmE,eAAe,OACfoC,gBAAgB,MAhCf,WACb,IAAIhJ,EAAQ,EAAKsB,MAAMI,MAAMmC,KAAK,EAAKvC,MAAMrD,IAAI8B,QAEjD,GAAe,IAAXC,EAEG,OAAe,IAAXA,EACC,4BAAQoG,GAAIzG,EAAE9B,EAAGwI,GAAI1G,EAAE5B,EAAGkD,EAAE,IAAIhD,GAAI,EAAKqD,MAAMrD,GAAG,UACtDsI,KAAK,UACLC,OAAO,UAAUG,OAAO,IAAIlE,UAAU,WACnCzC,EAAS,GACR,0BAAM/B,GAAI,EAAKqD,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,EAAGE,EAAG4B,EAAE5B,EAAE,EAAG0E,UAAU,SAASzC,GAC3EA,GAAU,GACT,0BAAM/B,GAAI,EAAKqD,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,EAAGE,EAAG4B,EAAE5B,EAAE,EAAG0E,UAAU,SAASzC,QAD/E,EAuBF8G,GACD,0BAAM7I,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,GAAIE,EAAG4B,EAAE5B,EAAE,GAAI0E,UAAU,SAASlE,KAAK+C,MAAMrD,IACvF,0BAAMA,GAAIM,KAAK+C,MAAMrD,GAAG,UAAWJ,EAAG8B,EAAE9B,EAAE,GAAIE,EAAG4B,EAAE5B,EAAE,EAAG0E,UAAU,QAAQlE,KAAK+C,MAAMI,MAAMmC,KAAKtF,KAAK+C,MAAMrD,IAAIgL,kB,GA3D7F7D,GCkEnB8D,E,iLA7DD,IAAD,OACDvJ,EAAIpB,KAAK+C,MAAMI,MAAMlD,OACrB0B,EAAI3B,KAAK+C,MAAMI,MAAMjD,YACrBW,EAAIb,KAAK+C,MAAMI,MAAMmC,KACrBsF,EAAc,GAElB,IAAK,IAAMvJ,KAASD,EAChBwJ,EAAYxJ,EAAEC,GAAOC,QAAUD,EAGnC,IAAMiE,EAAO5E,OAAOC,KAAKE,GAAG6C,KAAI,SAACrC,EAAOwJ,GAAR,OAC5B,kBAAC,EAAD,CAAMhH,IAAKxC,EAAO3B,GAAI2B,EAAO8B,MAAO,EAAKJ,MAAMI,WAG7ClD,EAASS,OAAOC,KAAKS,GAAGsC,KAAI,SAACrC,EAAOwJ,GAAR,OAC9B,kBAAC,EAAD,CAAOhH,IAAKxC,EAAO3B,GAAI2B,EAAO8B,MAAO,EAAKJ,MAAMI,WAG9CjD,EAAcQ,OAAOC,KAAKgB,GAAG+B,KAAI,SAACrC,EAAOwJ,GAAR,OACnC,kBAAC,EAAD,CAAYhH,IAAKxC,EAAO3B,GAAI2B,EAAO8B,MAAO,EAAKJ,MAAMI,WAGnD2H,EAAO,GAEb,IAAK,IAAMC,KAAOpJ,EACd,IAAK,IAAMqJ,KAASrJ,EAAEoJ,GAAKhJ,OAAQ,CAC/B,IAAIrC,EAAKqL,EAAI,KAAKC,EAClBF,EAAKG,KACD,kBAAC,EAAD,CAAKpH,IAAKnE,EAAKA,GAAIA,EAAIyD,MAAOnD,KAAK+C,MAAMI,MAAOoC,OAAQyF,EAAOvF,OAAQsF,EAAKvB,WAAW,EAAM0B,WAAYvJ,KAKrH,IAAK,IAAMoJ,KAAOpJ,EACd,IAAK,IAAMb,KAAKa,EAAEoJ,GAAKlJ,MAAO,CAC1B,IAAIhB,EAAIc,EAAEoJ,GAAKlJ,MAAMf,GACrB,GAAID,EAAI,EAAG,CACP,IAAInB,EAAKqL,EAAI,KAAKH,EAAY9J,GAC9BgK,EAAKG,KACD,kBAAC,EAAD,CAAKpH,IAAKnE,EAAKA,GAAIA,EAAIyD,MAAOnD,KAAK+C,MAAMI,MAAOoC,OAAQwF,EAAKtF,OAAQmF,EAAY9J,GAAIoK,WAAYvJ,UAElG,GAAId,EAAI,EAAG,CACd,IAAInB,EAAKqL,EAAI,KAAKH,EAAY9J,GAC9BgK,EAAKG,KACD,kBAAC,EAAD,CAAKpH,IAAKnE,EAAIA,GAAIA,EAAIyD,MAAOnD,KAAK+C,MAAMI,MAAOoC,OAAQqF,EAAY9J,GAAI2E,OAAQsF,EAAKG,WAAYvJ,MAMhH,OACI,uBAAGjC,GAAIM,KAAK+C,MAAMjD,QACZwF,EACAwF,EACA7K,EACAC,O,GAzDAiE,a,ICFZgH,E,WACF,WAAYlL,EAAQC,GAMhB,IAAK,IAAMY,KANmB,oBAC9Bd,KAAKuD,MAAQ,GACbvD,KAAKuB,SAAW,GAChBvB,KAAKE,YAAcA,EACnBF,KAAKC,OAASA,EAEEA,EACZD,KAAKuB,SAAStB,EAAOa,GAAGQ,QAAUrB,EAAOa,GAAGS,SAC5CvB,KAAKuD,MAAMtD,EAAOa,GAAGQ,QAAUrB,EAAOa,GAAGU,QAG7CxB,KAAK4J,QAAU5J,KAAK4J,QAAQ3G,KAAKjD,MACjCA,KAAKoL,WAAapL,KAAKoL,WAAWnI,KAAKjD,MACvCA,KAAK6J,gBAAkB7J,KAAK6J,gBAAgB5G,KAAKjD,MACjDA,KAAKqL,KAAOrL,KAAKqL,KAAKpI,KAAKjD,M,iDAG1BuD,EAAO1B,EAAOyJ,GACf,IAAIC,EAAO,GACPC,GAAQ,EACZ,IAAK,IAAM1K,KAAKyC,EACZgI,EAAKzK,GAAKyC,EAAMzC,GAAKe,EAAMf,GAAKwK,GAE5BC,EAAKzK,GAAK,GAAMd,KAAKuB,SAAST,GAAK,GAAKd,KAAKuB,SAAST,GAAKyK,EAAKzK,MAChE0K,GAAQ,GAIhB,MAAO,CAACD,EAAMC,K,iCAGPC,EAAKH,GACZ,IACI3J,EAAI3B,KAAKE,YAAYuL,GACzB,IAAK,IAAMT,KAASrJ,EAAEI,OAGlB,GAFM/B,KAAK0L,KAAK1L,KAAKuD,MAAO5B,EAAEI,OAAOiJ,GAAQM,GAErC,GACJ,OAAO,EAIf,OAAO,I,sCAGKG,EAAKH,GACjB,IAAI3J,EAAI3B,KAAKE,YAAYuL,GAEzB,OADUzL,KAAK0L,KAAK1L,KAAKuD,MAAO5B,EAAEE,MAAOyJ,GAAY,GACzC,K,8BAGRG,EAAKH,GACT,GAAgB,MAAZA,GAAoBA,EAAW,EAE/B,OADArB,QAAQ0B,MAAM,wCAAyCL,GAChD,CAACtL,KAAKuD,OAAO,GAExB,IAAI5B,EAAI3B,KAAKE,YAAYuL,GAEzB,OAAIzL,KAAKoL,WAAWK,EAAKH,GAAY,GAC1B,CAACtL,KAAKuD,OAAO,GAGdvD,KAAK0L,KAAK1L,KAAKuD,MAAO5B,EAAEE,MAAOyJ,GAAY,K,2BAIpDG,EAAKH,EAAUM,GAChB,IAAIC,EAAM7L,KAAK4J,QAAQ6B,EAAKH,GACxBO,EAAI,KACJ7L,KAAKuD,MAAQsI,EAAI,GACbD,GAAYA,S,KCrE5B,IAGM/L,E,WAEF,WAAYiM,EAAQC,EAAQC,GAAW,IAAD,2BAElC,IAAIC,EAAQH,IACZ9L,KAAKF,OAASmM,EAAMnM,OACpBE,KAAKC,OAASgM,EAAMhM,OACpBD,KAAKE,YAAc+L,EAAM/L,YACzBF,KAAKsF,KAAQ2G,EAAM3G,MAAQ,GAC3BtF,KAAKkM,YAGLlM,KAAKoD,KAAO,SACZpD,KAAKmM,OAAS,WACV,EAAKD,YACLF,KAEJhM,KAAKoM,KAAOL,EACZ/L,KAAKqM,WAAa,KAClBrM,KAAKsM,aAAe,KACpBtM,KAAKuM,iBAAmB,KAGxBvM,KAAKsD,QAAUtD,KAAKsD,QAAQL,KAAKjD,MACjCA,KAAKwF,OAASxF,KAAKwF,OAAOvC,KAAKjD,MAC/BA,KAAKsI,cAAgBtI,KAAKsI,cAAcrF,KAAKjD,MAC7CA,KAAKkF,cAAgBlF,KAAKkF,cAAcjC,KAAKjD,MAC7CA,KAAKqF,QAAUrF,KAAKqF,QAAQpC,KAAKjD,MAGjCA,KAAKgD,WAAahD,KAAKgD,WAAWC,KAAKjD,MACvCA,KAAK+G,gBAAkB/G,KAAK+G,gBAAgB9D,KAAKjD,MACjDA,KAAKkM,UAAYlM,KAAKkM,UAAUjJ,KAAKjD,MAGrCA,KAAK2J,UAAY3J,KAAK2J,UAAU1G,KAAKjD,MACrCA,KAAK4J,QAAU5J,KAAK4J,QAAQ3G,KAAKjD,MACjCA,KAAKoL,WAAapL,KAAKoL,WAAWnI,KAAKjD,MACvCA,KAAK6J,gBAAkB7J,KAAK6J,gBAAgB5G,KAAKjD,MACjDA,KAAKqL,KAAOrL,KAAKqL,KAAKpI,KAAKjD,MAC3BA,KAAKmH,WAAanH,KAAKmH,WAAWlE,KAAKjD,MAGvCA,KAAKwM,YAAcxM,KAAKwM,YAAYvJ,KAAKjD,MACzCA,KAAK8J,gBAAgB9J,KAAK8J,gBAAgB7G,KAAKjD,MAC/CA,KAAKsH,WAAWtH,KAAKsH,WAAWrE,KAAKjD,MACrCA,KAAK0I,SAAS1I,KAAK0I,SAASzF,KAAKjD,MACjCA,KAAK4I,YAAY5I,KAAK4I,YAAY3F,KAAKjD,MACvCA,KAAKuH,cAAcvH,KAAKuH,cAActE,KAAKjD,MAC3CA,KAAKuK,SAASvK,KAAKuK,SAAStH,KAAKjD,MACjCA,KAAKwK,YAAYxK,KAAKwK,YAAYvH,KAAKjD,M,wDAIvC,IAAK,IAAMqB,KAASrB,KAAKsF,KAAM,CAC3B,IAAMzE,EAAIb,KAAKsF,KAAKjE,GAEpB,IAAK,IAAMP,KAAKD,EAAC,QAAa,CAC1B,IAAI4L,EAAO5L,EAAC,QAAYC,GAExB,GAAI,WAAY2L,EAAM,CAClB,IAAIrL,EAAIpB,KAAKwF,OAAOiH,EAAI,OAAJ,QAChB9K,EAAI3B,KAAKwF,OAAOiH,EAAI,OAAJ,QAChBtK,GAAQ,EACRf,GAAK,UAAWA,IAEhBO,EAAI3B,KAAKwF,OAAOiH,EAAI,OAAJ,QAChBrL,EAAIpB,KAAKwF,OAAOiH,EAAI,OAAJ,QAChBtK,EAAO,GAEPR,GAAKP,IACLO,EAAEE,MAAMT,EAAEE,QAAUT,EAAEW,QAAQW,GAItC,GAAI,YAAasK,EAAO,CACpB,IAAIrL,EAAIpB,KAAKwF,OAAOiH,EAAI,QAAJ,QACpB,IAAKrL,GAAKA,GAAK,UAAWA,EACtB,OAEJA,EAAEI,QAAUX,EAAEW,a,8BAMtBnC,GACJ,OAAIA,EAAIoG,QAAUpG,EAAIkG,OACX,MAGNlG,EAAIoG,UAAUzF,KAAKE,YACb,aAGPb,EAAIoG,UAAUzF,KAAKsF,KACZ,WAGPjG,EAAIoG,UAAUzF,KAAKC,OACZ,aADX,I,sCAMA,OAAOD,KAAKuM,mB,kCAGJlN,EAAKuM,GACb5L,KAAKuM,iBAAmBlN,EACxBuM,M,iCAKA,IADA,IAAItM,EAAI,EACDU,KAAKC,OAAO,QAAQX,IACvBA,IAEJ,MAAO,QAAQA,I,sCAKf,IADA,IAAIA,EAAI,EACDU,KAAKE,YAAY,MAAMZ,IAC1BA,IAEJ,MAAO,MAAMA,I,+BAKb,IADA,IAAIA,EAAI,EACDU,KAAKsF,KAAK,MAAMhG,IACnBA,IAEJ,MAAO,MAAMA,I,kCAIb,MAAqB,YAAdU,KAAKoD,MAAyC,MAAnBpD,KAAKqM,a,oCAG7BZ,GACV,IAAIrK,EAAIpB,KAAKwF,OAAOiG,GACpB,OAAKrK,EAKDpB,KAAK2J,YACE3J,KAAKqM,WAAW9I,MAAMnC,EAAEE,QAExBF,EAAEI,SAPTyI,QAAQ0B,MAAM,mBAAoBF,IAC1B,K,2BAUXA,EAAKH,GACN,IAAIoB,GAAU,EAMd,OALI1M,KAAK2J,aACL3J,KAAKqM,WAAWhB,KAAKI,EAAKH,GAAY,GAAG,WACrCoB,GAAU,KAGXA,I,8BAGHjB,EAAK7J,GACT,IAAID,EAAI3B,KAAKwF,OAAOiG,GACpB,QAAI7J,GAAQD,EAAEC,OAASA,QAInB5B,KAAK2J,aAAe8B,KAAOzL,KAAKE,cACtBF,KAAKqM,WAAWzC,QAAQ6B,GACvB,M,iCAMRA,EAAKH,GACZ,OAAOtL,KAAKqM,WAAWjB,WAAWK,EAAKH,K,sCAG3BG,EAAKH,GACjB,OAAOtL,KAAKqM,WAAWxC,gBAAgB4B,EAAKH,K,gCAI5C,OAAOtL,KAAKoD,O,6BAGTqI,GACH,OAAIA,KAAOzL,KAAKE,YACLF,KAAKE,YAAYuL,GACjBA,KAAOzL,KAAKC,OACRD,KAAKC,OAAOwL,GAEhBzL,KAAKsF,KAAKmG,K,sCAITkB,EAAI3I,EAAK4H,GACrB,KAAI,CAAC,UAAW,UAAUgB,QAAQ5M,KAAKoD,OAAS,GAAhD,CAIA,IAAI/D,EAAMW,KAAKwF,OAAOmH,EAAG5J,MAAMrD,IAC/BL,EAAIqC,SAASpC,EAAID,EAAIqC,SAASpC,EAAI0E,EAAI6I,UACtCxN,EAAIqC,SAASlC,EAAIH,EAAIqC,SAASlC,EAAIwE,EAAI8I,UACtC9M,KAAKmM,SAEDP,GACAA,O,iCAIG1I,EAAQ0I,GAOf,OANI5L,KAAKoD,OAASF,IACdA,EAAS,UAGblD,KAAKoD,KAAKF,EAEHA,GACH,IAAK,UACDlD,KAAKqM,WDzOV,IAAIlB,GADuBpL,EC0OUC,MDzOhBC,OAAQF,EAAIG,aAD7B,IAAuBH,ECmP9BC,KAAKmM,SACDP,GACAA,EAAS5L,KAAKoD,Q,oCAKlB,OAAO1C,OAAOC,KAAKX,KAAKC,QAAQyD,KAAI,WAChC,OAAO,O,+BAINqJ,GACL,IAAIC,EAAYtM,OAAOC,KAAKX,KAAKC,QAAQW,OAUzC,IAAK,IAAM6K,KATXzL,KAAKC,OAAOD,KAAKiN,YAAc,CAC3BzL,QAAS,EACTD,SAAU,EACVD,OAAQ0L,EAERtL,SAAU,CAAEpC,EAAGyN,EAAOzN,EAAGE,EAAGuN,EAAOvN,EAhQzB,KAoQIQ,KAAKE,YACnBF,KAAKE,YAAYuL,GAAK5J,MAAMmL,GAAa,EAG7C,OAAO,I,oCAGGD,GACV,IAAItB,EAAMzL,KAAKkN,gBAOf,OANAlN,KAAKE,YAAYuL,GAAO,CACpB7J,KAAM,UACNC,MAAO7B,KAAK8B,cACZJ,SAAU,CAAEpC,EAAGyN,EAAOzN,EAAGE,EAAGuN,EAAOvN,EAhRzB,IAiRVuC,OAAQ,KAEL,I,kCAGCiC,GACR,IAAI0I,GAAU,EACd,OAAQ1M,KAAKoD,MACT,IAAK,QACDsJ,EAAU1M,KAAKmN,SAAS,CAAC7N,EAAG0E,EAAIoJ,QAAQ,EAAG5N,EAAGwE,EAAIqJ,QAAQ,KAC1D,MAEJ,IAAK,aACDX,EAAU1M,KAAKsN,cAAc,CAAChO,EAAG0E,EAAIoJ,QAAQ,EAAG5N,EAAGwE,EAAIqJ,QAAQ,KAC/D,MAEJ,IAAK,MACDX,EAAU1M,KAAKuN,OAAO,CAACjO,EAAG0E,EAAIoJ,QAAQ,EAAG5N,EAAGwE,EAAIqJ,QAAQ,KAMhErJ,EAAIgD,kBACA0F,GAAW1M,KAAKmM,W,+BAGfqB,EAAOC,GACZ,OACKD,KAASxN,KAAKC,QAAUwN,KAAOzN,KAAKE,aACpCsN,KAASxN,KAAKE,aAAeuN,KAAOzN,KAAKC,S,6BAI3CuN,EAAOC,GACV,IAAI9L,EAAI,KACJP,EAAI,KACJmI,EAAS,EAETiE,KAASxN,KAAKE,aACdqJ,EAAS,EACT5H,EAAI3B,KAAKE,YAAYsN,GACrBpM,EAAIpB,KAAKC,OAAOwN,KAEhBlE,GAAU,EACV5H,EAAI3B,KAAKE,YAAYuN,GACrBrM,EAAIpB,KAAKC,OAAOuN,IAGpB7L,EAAEE,MAAMT,EAAEE,QAAUiI,I,mCAGXiE,EAAOC,GAChB,IAAIf,GAAU,EAEd,OAAQ1M,KAAKoD,MACT,IAAK,MACGpD,KAAK0N,SAASF,EAAOC,KAErBzN,KAAK2N,OAAOH,EAAOC,GACnBf,GAAU,GAQtB,OADA1M,KAAKsM,aAAe,KACbI,I,gCAGDjB,GACDzL,KAAKsM,aAGNtM,KAAK4N,aAAa5N,KAAKsM,aAAcb,GAFrCzL,KAAKsM,aAAeb,I,+BAMnBA,GACL,IAAInK,EAAStB,KAAKC,OAAOwL,GAAKnK,OAC9B,IAAK,IAAMyJ,KAAO/K,KAAKE,mBACZF,KAAKE,YAAY6K,GAAKlJ,MAAMP,UAC5BtB,KAAKE,YAAY6K,GAAKhJ,OAAO0J,UAEjCzL,KAAKC,OAAOwL,K,6BAGhBpM,GACH,IAAI+B,EAAI,KACJO,EAAI,KAEJtC,EAAIkG,UAAUvF,KAAKC,QACnBmB,EAAI/B,EAAIkG,OACR5D,EAAItC,EAAIoG,SAER9D,EAAItC,EAAIkG,OACRnE,EAAI/B,EAAIoG,QAGZ,IAAInE,EAAStB,KAAKC,OAAOmB,GAAGE,OAC5BtB,KAAKE,YAAYyB,GAAGE,MAAMP,GAAU,SAC7BtB,KAAKE,YAAYyB,GAAGI,OAAOX,K,oCAGxBqK,GACV,IAAIiB,GAAU,EACd,OAAQ1M,KAAKoD,MACT,IAAK,QACD,IAAIhC,EAAIpB,KAAKwF,OAAOiG,GAChBrK,EAAEI,QAAU,IACZJ,EAAEI,UACFkL,GAAU,GAOlBA,GAAW1M,KAAKmM,W,iCAGbV,GAAM,IAAD,OACZzL,KAAK6N,YAAY,CAAEpI,OAAQgG,IAAO,WAC9B,OAAQ,EAAKrI,MACT,IAAK,SACD,EAAK0K,SAASrC,GACd,MAEJ,IAAK,MACD,EAAKsC,UAAUtC,GACf,MAEJ,IAAK,QACD,EAAKjG,OAAOiG,GAAKjK,UAMzB,EAAK2K,c,sCAIGV,GAAM,IAAD,OACjBzL,KAAK6N,YAAY,CAAEpI,OAAQgG,IAAO,WAC9B,OAAQ,EAAKrI,MACT,IAAK,UACD,EAAKiI,KAAKI,GACV,MAEJ,IAAK,gBACM,EAAKvL,YAAYuL,GACxB,EAAKc,iBAAmB,KACxB,MAEJ,IAAK,MACD,EAAKwB,UAAUtC,GAMvB,EAAKU,c,iCAKFV,GACP,OAAOzL,KAAKsM,eAAiBb,I,sCAGjB7L,GACZ,GAAIA,EAAI2F,UAAUvF,KAAKE,YAEnB,OAAO,EAGX,IAAImB,EAAQzB,EAAI2F,OACZnE,EAAIpB,KAAKwF,OAAO5F,EAAI2F,QACpB5D,EAAI3B,KAAKwF,OAAO5F,EAAI6F,QAWxB,OAT0B,IAAtB9D,EAAEE,MAAMT,EAAEE,SACVK,EAAEI,OAAOV,GAASrB,KAAK8B,cACvBH,EAAEI,OAAOV,GAAOD,EAAEE,QAAUK,EAAEE,MAAMT,EAAEE,QACtCK,EAAEE,MAAMT,EAAEE,QAAU,IAGpBK,EAAEE,MAAMT,EAAEE,QAAUK,EAAEI,OAAOV,GAAOD,EAAEE,eAC/BK,EAAEI,OAAOV,KAEb,I,oCAGGM,EAAGqM,EAAK1M,EAAQO,GAC1B,IAAIhB,EAAIc,EAAEI,OAAOiM,GAAK1M,GAStB,OAPIT,EAAI,IACJA,GAAKgB,GAELhB,EAAI,IACJA,GAAKgB,GAGC,IAANhB,IAIJc,EAAEI,OAAOiM,GAAK1M,GAAUT,GACjB,K,kCAGCxB,EAAKwC,GACb,IAAIF,EAAI,KACJP,EAAI,KACJ4M,EAAM,KAWV,GAVI3O,EAAIkG,UAAUvF,KAAKE,aACnByB,EAAI3B,KAAKwF,OAAOnG,EAAIkG,QACpBnE,EAAIpB,KAAKwF,OAAOnG,EAAIoG,QACpBuI,EAAM3O,EAAIoG,SAEV9D,EAAI3B,KAAKwF,OAAOnG,EAAIoG,QACpBrE,EAAIpB,KAAKwF,OAAOnG,EAAIkG,QACpByI,EAAM3O,EAAIkG,QAGY,IAAtB5D,EAAEE,MAAMT,EAAEE,QACV,OAAOtB,KAAKiO,cAActM,EAAGqM,EAAK5M,EAAEE,OAAQO,GAGhD,IAAIhB,EAAIc,EAAEE,MAAMT,EAAEE,QASlB,OAPIT,EAAI,IACJA,GAAKgB,GAELhB,EAAI,IACJA,GAAKgB,GAGC,IAANhB,IAIJc,EAAEE,MAAMT,EAAEE,QAAUT,GACb,K,+BAGFxB,GAAM,IAAD,OACVW,KAAK6N,YAAYxO,GAAK,WAClB,OAAQ,EAAK+D,MACT,IAAK,QACD,EAAK8K,YAAY7O,EAAK,GACtB,MAEJ,IAAK,SACGA,EAAIkG,OAAU,EAAKrF,YACnB,EAAKiO,OAAO9O,GAYxB,EAAK8M,c,kCAID9M,GACR,IAAIqN,GAAU,EACd,OAAQ1M,KAAKoD,MACT,IAAK,MACDsJ,EAAU1M,KAAKoO,gBAAgB/O,GAC/B,MAEJ,IAAK,QACDqN,EAAU1M,KAAKkO,YAAY7O,GAAM,GAMrCqN,GAAW1M,KAAKmM,W,6BAIjBY,GACH,IAAIC,EAAYtM,OAAOC,KAAKX,KAAKsF,MAAM1E,OAQvC,OAPAZ,KAAKsF,KAAKtF,KAAKqO,UAAY,CACvB7M,QAAS,EACTF,OAAQ0L,EAERtL,SAAU,CAAEpC,EAAGyN,EAAOzN,EAAGE,EAAGuN,EAAOvN,EAzjBzB,MA4jBP,I,kCAGCiM,EAAKH,GAEb,OADAtL,KAAKsF,KAAKmG,GAAKjK,SAAU8J,GAAY,GAC9B,I,+BAGFG,GAAM,IAAD,OACVzL,KAAK6N,YAAY,CAAGpI,OAAQgG,IAAM,WAC9B,OAAQ,EAAKrI,MACT,IAAK,QACD,EAAKkL,YAAY7C,EAAK,GAM9B,EAAKU,c,kCAIDV,GAAM,IAAD,OACbzL,KAAK6N,YAAY,CAAEpI,OAAQgG,IAAO,WAC9B,OAAQ,EAAKrI,MACT,IAAK,QACD,EAAKkL,YAAY7C,GAAM,GAM/B,EAAKU,gB,KC3lBIoC,E,YAEjB,WAAYxL,GAAQ,IAAD,8BACf,4CAAMA,KACDe,QAAU,EAAKA,QAAQb,KAAb,gBAFA,E,qEAKXe,GACJhE,KAAKuD,MAAMiJ,YAAYxI,K,0CAGN,IDhBQ5C,ECgBT,OAChBpB,KAAKqD,UDjBoBjC,ECkBZ,CACL0K,OAAQ,WACJ,IAAI0C,EAAK,EAAKzL,MAAM0L,WAoCpB,OAjCAD,EAAGlJ,KAAO,CACN,eAAgB,CACZ9D,QAAS,EACTF,OAAQ,EACRI,SAAU,CAAEpC,EAAG,IAAKE,EAAG,KACvBkL,YAAa,wBACbgE,QAAS,CACL,CAACnF,OAAQ,CAAEhE,OAAQ,QAASE,OAAQ,eACpC,CAAC8D,OAAQ,CAAEhE,OAAQ,aAAcE,OAAQ,UACzC,CAACjE,QAAS,CAAEiE,OAAQ,iBAG5B,WAAY,CACRjE,QAAS,EACTF,OAAQ,EACRI,SAAU,CAAEpC,EAAG,IAAKE,EAAG,KACvBkL,YAAa,oCACbgE,QAAS,CACL,CAACnF,OAAQ,CAAEhE,OAAQ,QAASE,OAAQ,WACpC,CAAC8D,OAAQ,CAAEhE,OAAQ,SAAUE,OAAQ,UACrC,CAACjE,QAAS,CAACiE,OAAQ,aAG3B,UAAW,CACPjE,QAAS,EACTF,OAAQ,EACRI,SAAU,CAAEpC,EAAG,IAAKE,EAAG,KACvBkL,YAAa,wEACbgE,QAAS,CACL,CAACnF,OAAQ,CAAEhE,OAAQ,QAASE,OAAQ,cAIzC+I,GAEXzC,OAAQ/L,KAAK+C,MAAM4L,SACnB3C,SAAU,WACN,EAAK3I,SAAS,EAAKE,SD3D5B,IAAI1D,EAAMuB,EAAE0K,OAAQ1K,EAAE2K,OAAQ3K,EAAE4K,c,+BCmEnC,OAAMhM,KAAKuD,MAKP,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,CAAML,MAAOnD,KAAKuD,QAClB,kBAAC,EAAD,CAASJ,MAAOnD,KAAKuD,QACrB,yBAAK4G,MAAOlD,OAAOC,WACdkD,OAAQ,IACRrG,cAAe,SAACC,GAAD,OAASA,EAAIC,kBAC5BH,QAAS9D,KAAK8D,SACf,8BACI,4BAAQpE,GAAG,eAAekP,YAAY,KAAKC,aAAa,KAAKC,KAAK,KAAKC,KAAK,IAAI3G,OAAO,QACnF,0BAAMlE,UAAU,aAAaiG,MAAM,KAAKC,OAAO,IAAIpC,KAAK,UAAUC,OAAO,UAAU3I,EAAE,IAAIE,EAAE,MAC3F,0BAAMwP,EAAE,2BAEZ,4BAAQtP,GAAG,iBAAiBkP,YAAY,KAAKC,aAAa,KAAKC,KAAK,KAAKC,KAAK,IAAI3G,OAAO,QACrF,0BAAMlE,UAAU,aAAaiG,MAAM,KAAKC,OAAO,IAAIpC,KAAK,UAAUC,OAAO,UAAU3I,EAAE,IAAIE,EAAE,MAC3F,4BAAQqI,GAAG,IAAIC,GAAG,MAAMpF,EAAG,MAGnC,kBAAC,EAAD,CAAKS,MAAOnD,KAAKuD,SAErB,6BACA,kBAAC,EAAD,CAAYJ,MAAOnD,KAAKuD,SAxBrB,kBAAC,IAAMC,SAAP,U,GAhEiBW,aCoCrB8K,G,mBArCX,WAAYlM,GAAQ,IAAD,8BACf,4CAAMA,KACD0L,SAAW,EAAKA,SAASxL,KAAd,gBAChB,EAAK0L,SAAW,EAAKA,SAAS1L,KAAd,gBAHD,E,wEAOf,OAAOqD,KAAK4I,MAAM5I,KAAKC,UAAUvG,KAAKuD,MAAL,U,+BAG5BJ,GACLnD,KAAKqD,SAAS,CACVF,MAAOA,M,2BAIVrD,GAAS,IAAD,QbWF,SAAmBA,EAAQqP,EAASxD,GAE/C,IAAIyD,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO,YAAYxP,EAAO,UAAU,GAC7CsP,EAAIG,OAAS,SAACC,GACa,IAAnBJ,EAAIK,aACe,MAAfL,EAAIM,OACJC,sBAAYP,EAAIQ,cAAc,SAACC,EAAKC,GAChC,GAAID,EACA5F,QAAQ0B,MAAMkE,OACX,CACH,IAAI9P,EAAM,IAAII,EAAML,EAAQgQ,GAC5B/P,EAAIgQ,UACJZ,EAAQ,IAAItP,EAAMC,EAAQC,SAIlC4L,EAAMyD,EAAIY,YACV/F,QAAQ0B,MAAMyD,EAAIY,eAI9BZ,EAAIa,QAAU,SAAUT,GAEpB,OADAvF,QAAQ0B,MAAMyD,EAAIY,YACX,MAEXZ,EAAIc,KAAK,MapCLC,CAAUrQ,GAAQ,SAACqD,GACf,EAAKwL,SAASxL,Q,0CAKlBnD,KAAKsP,KAAK,Y,+BAIV,OAAMtP,KAAKuD,MAKP,kBAAC,EAAD,CAAQkL,SAAUzO,KAAKyO,SAAUE,SAAU3O,KAAK2O,WAJxC,kBAAC,IAAMnL,SAAP,U,GA7BFW,cCOEiM,QACW,cAA7BnJ,OAAOoJ,SAASC,UAEe,UAA7BrJ,OAAOoJ,SAASC,UAEhBrJ,OAAOoJ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShO,SAASiO,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a3dd9f26.chunk.js","sourcesContent":["\n// initialMarking format is \"Default,0\"\nimport {parseString} from \"xml2js\";\n\nfunction getInitial(placeIn) {\n    return parseInt(placeIn.tokens[0])\n}\n\nfunction getCap(placeIn) {\n    return 0\n}\n\nfunction getCoords(obj) {\n    // REVIEW: pflow designates negative values\n    return { x: parseInt(obj.x), y: parseInt(obj.y)}\n}\n\nfunction getId(obj) {\n    return obj.id[0]\n}\n\nfunction getName(obj) {\n    return obj.name[0]\n}\n\nfunction getWeight(arc) {\n    return parseInt(arc['multiplicity'][0])\n}\n\nfunction isInhibitor(arc) {\n    return arc.type[0] === \"inhibitor\"\n}\n\nexport default function OpenPflow(schema, success, error) {\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"schemata/\"+schema+\".pflow\", true);\n    xhr.onload = (e) => {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                parseString(xhr.responseText, (err, pflow_json) => {\n                    if (err) {\n                        console.error(err)\n                    } else {\n                        let net = new PFlow(schema, pflow_json);\n                        net.reindex();\n                        success(new PTNet(schema, net));\n                    }\n                });\n            } else {\n                error(xhr.statusText);\n                console.error(xhr.statusText);\n            }\n        }\n    };\n    xhr.onerror = function (e) {\n        console.error(xhr.statusText);\n        return null;\n    };\n    xhr.send(null);\n}\n\nclass PTNet {\n    constructor(schema, net) {\n        this.schema = net.schema;\n        this.places = net.places;\n        this.transitions = net.transitions;\n    }\n\n}\n\n// construct PTNet from PFlow\nclass PFlow {\n    constructor(schema, pnml){\n        this.schema = schema;\n        this.places = {};\n        this.transitions = {};\n\n        // used to reindex pflow -> ptnet\n        this._pnml = pnml; // KLUDGE only use first net\n        this._place_ids = {}; // map[string] => offset\n        this._place_labels = {}; // map[string::id] => string\n        this._transition_ids = {}; // map[string] => offset\n    }\n\n    emptyVector() {\n        let size = Object.keys(this.places).length;\n        let v = [];\n        for (let i = 0; i < size; i++) {\n            v[i] = 0;\n        }\n        return v\n    }\n\n    loadSubnets(subnet) {\n\n        if(subnet.subnet) {\n            for (const n of subnet.subnet) {\n                this.loadSubnets(n);\n            }\n        }\n\n        for (const [i, p] of subnet['place'].entries()) {\n            this._place_ids[getId(p)] = i;\n            this._place_labels[getId(p)] = p.label;\n\n            this.places[p.label] = {\n                offset: i,\n                capacity: getCap(p),\n                initial: getInitial(p),\n                position: getCoords(p),\n            };\n        }\n\n        for (const t of subnet['transition']) {\n            this._transition_ids[getId(t)] = t.label;\n            this.transitions[t.label] = {\n                role: \"default\",\n                delta: this.emptyVector(),\n                position: getCoords(t),\n                guards: {},\n            };\n        }\n\n        for ( const a of subnet['arc']) {\n            let pkey = \"\";\n            let tkey = \"\";\n            let unit = null;\n\n            if (this.isTransition(a['destinationId'][0])) {\n                //console.log('(', s, ')', '<-[', d, ']')\n                tkey = 'destinationId';\n                pkey = 'sourceId';\n                unit = getWeight(a)*-1;\n            } else {\n                //console.log('[', s, '] ->','(', d, ')' )\n                tkey = 'sourceId';\n                pkey = 'destinationId';\n                unit = getWeight(a);\n            }\n\n            // TODO deal w/ ref_places (from subnets)\n\n            let t = this.transitions[this._transition_ids[a[tkey]]];\n            let place_offset = this._place_ids[a[pkey]];\n            let place_label = this._place_labels[a[pkey]];\n\n            if (isInhibitor(a)) {\n                let g = this.emptyVector();\n                //console.log('inhibitor', unit)\n                g[place_offset] = unit; // FIXME should this be inverted?\n                t.guards[place_label] = g;\n            }  else {\n                t.delta[place_offset] = unit;\n            }\n\n        }\n    }\n\n    isTransition(label) {\n        if (label in this._transition_ids) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    reindex() {\n        for (const n of this._pnml.document['subnet']) {\n            this.loadSubnets(n);\n        }\n\n        for (const r of this._pnml.document['roles'][0].role) {\n            const label = getName(r);\n            for (const tid of r['transitionId']) {\n                this.transitions[this._transition_ids[tid]].role = label;\n            }\n        }\n    }\n};\n\n","import React, { Component } from 'react'\n\nconst ACTIONS = [\n    \"select\",\n    \"delete\",\n    \"var\",\n    \"place\",\n    \"transition\",\n    \"arc\",\n    \"token\",\n    \"execute\",\n];\n\nexport default class Toolbar extends Component {\n    constructor(props) {\n        super(props);\n        this.menuAction = this.menuAction.bind(this);\n    }\n\n    menuAction(action) {\n        this.props.ptnet.menuAction(action, (mode) => {\n            this.setState({ mode: mode })\n        })\n    }\n\n    componentDidMount() {\n        this.setState({ mode: this.props.ptnet.getMode() })\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment/>)\n        }\n\n        let actions = ACTIONS.map((label) => {\n            let style = { color: \"grey\"};\n            if (this.state.mode === label) {\n                style = { color: \"black\"};\n            }\n            return (<button key={label} style={style} name={label}\n                onClick={() => this.menuAction(label)}\n                onContextMenu={(evt) => evt.preventDefault() }\n            >{label}</button>)\n        }) ;\n\n        return (\n            <React.Fragment>\n                <div className=\"menu\" mode={this.props.ptnet.mode}> {actions} </div>\n                <hr />\n            </React.Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default class Properties extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.getData = this.getData.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ tab: 0 })\n    }\n\n    handleChange(evt, val) {\n        this.setState({ tab: val })\n    }\n\n    getData() {\n        let obj = this.props.ptnet.getCurrentObj();\n\n        let data = {\n            selected: obj,\n        };\n\n        if (! obj) {\n            return { type: \"Select\" }\n        }\n\n        data.type = this.props.ptnet.getType(obj);\n        if (!obj)  {\n            return this.props.ptnet.vars;\n        }\n\n        switch (this.state.tab) {\n            case 0: {\n                data.source = this.props.ptnet.getObj(obj['source']);\n                data.target = this.props.ptnet.getObj(obj['target']);\n                break\n            }\n            case 1: {\n                data.vars =this.props.ptnet.vars;\n                break\n            }\n            default :{\n            }\n        }\n\n        return data\n    }\n\n    render() {\n        if (! this.state)  {\n            return <React.Fragment />\n        }\n\n        let classes = useStyles;\n        let data = this.getData();\n\n        return (\n            <Paper square>\n                <Tabs\n                    value={this.state.tab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={this.handleChange} >\n                    <Tab label={data.type || \"Select\"} />\n                    <Tab label=\"Variables\" />\n\n                </Tabs>\n                <div style={{ maxWidth: '100%' }}>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <pre>\n                        {JSON.stringify(data, null, \"\\t\")}\n                        </pre>\n                    </Typography>\n                </div>\n            </Paper>\n        )\n    }\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nconst useStyles = makeStyles(theme => ({\n      root: {\n              flexGrow: 1,\n            },\n      menuButton: {\n              marginRight: theme.spacing(2),\n            },\n      title: {\n              flexGrow: 1,\n            },\n}));\n\nexport default function ButtonAppBar() {\n      const classes = useStyles();\n\n      return (\n              <div className={classes.root}>\n                 <AppBar position=\"static\">\n                    <Toolbar>\n                       <Typography variant=\"h6\" className={classes.title}>\n                           Pflow-Editor\n                       </Typography>\n                        <a\n                            href=\"https://github.com/stackdump/pflow-editor\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className={classes.dropdownLink}\n                        > <GitHubIcon /> </a>\n                    </Toolbar>\n                 </AppBar>\n              </div>\n            );\n}\n","import {Component} from \"react\";\n\nexport default class Draggable extends Component {\n\n    // Keeps a user from mousing-out of the svg if dragging too quickly\n    getHandleWidth() {\n        if (this.state.dragging) {\n            return window.innerWidth*2\n        } else {\n            return 36\n        }\n    }\n\n    getStroke() {\n        if (this.props.ptnet.isSelected(this.props.id)) {\n            return \"#8140ff\"\n        }  else {\n            return \"#000000\"\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ dragging: false, })\n    }\n\n    startDrag(evt) {\n        this.setState({ dragging: true });\n        evt.stopPropagation();\n    }\n\n    endDrag(evt) {\n        this.setState({ dragging: false });\n        evt.stopPropagation();\n    }\n\n    dragging = (evt) => {\n        if (this.state.dragging) {\n            this.props.ptnet.positionUpdated(this, evt);\n        }\n        evt.stopPropagation();\n    };\n\n}\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Place extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.props.ptnet.placeClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    onAltClick(evt) {\n        this.props.ptnet.placeAltClick(this.props.id);\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    render() {\n        if (! this.state ) { return(<g/>) }\n        let p = this.props.ptnet.getObj(this.props.id).position;\n\n        let tokenCount = () => {\n            let tokens = this.props.ptnet.getTokenCount(this.props.id);\n\n            if (tokens === 0){\n                return // don't show zeros\n            } else if (tokens === 1) {\n                return (<circle cx={p.x} cy={p.y} r=\"2\" id={this.props.id+\"_tokens\"} fill=\"#000000\" stroke=\"#000000\" orient=\"0\" className=\"tokens\"/>)\n            } else if (tokens < 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-4} y={p.y+5} className=\"large\">{tokens}</text>)\n            } else if (tokens >= 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-7} y={p.y+5} className=\"small\">{tokens}</text>)\n            }\n        };\n\n        return (\n            <g\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onClick={this.onClick}\n                onContextMenu={this.onAltClick}\n            >\n                <circle id={this.props.id+\"_handle\"} cx={p.x} cy={p.y} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n                <circle cx={p.x} cy={p.y} r=\"20\"id={this.props.id}\n                        strokeWidth=\"1.5\" fill=\"#FFFFFF\" stroke={this.getStroke()} orient=\"0\"\n                        className=\"place\"\n                        shapeRendering=\"auto\"\n                />\n                {tokenCount()}\n                <text id={this.props.id+\"[label]\"} x={p.x-20} y={p.y-25} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n","import React, { Component } from 'react'\n\nexport default class Arc extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n        this.getMarker = this.getMarker.bind(this);\n    }\n\n    getArcDef() {\n        return {source: this.props.source, target: this.props.target};\n    }\n\n    onClick(evt) {\n        evt.stopPropagation();\n        this.props.ptnet.arcClick(this.getArcDef());\n    }\n\n    onAltClick(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.props.ptnet.arcAltClick(this.getArcDef());\n    }\n\n    getMarker() {\n        if (this.props['inhibitor']) {\n            return \"url(#markerInhibit1)\"\n        } else {\n            return \"url(#markerArrow1)\"\n        }\n    }\n\n    render() {\n        let source = this.props.ptnet.getObj(this.props.source);\n        let target = this.props.ptnet.getObj(this.props.target);\n        if (! source || ! target) {\n            return (< g/>)\n        }\n\n        let x1=source.position.x;\n        let y1=source.position.y;\n        let x2=target.position.x;\n        let y2=target.position.y;\n\n        let midX = (x2+x1)/2;\n        let midY = (y2+y1)/2 - 8;\n        let offsetX=4;\n        let offsetY=4;\n\n        if (Math.abs(x2-midX) < 8) {\n            offsetX=8;\n        }\n\n        if (Math.abs(y2-midY) < 8) {\n            offsetY=0;\n        }\n\n        let weight = 0;\n        if (this.props.inhibitor) {\n            if ('delta' in source) {\n                weight = source.guards[this.props.target][target.offset];\n            } else {\n                weight = target.guards[this.props.source][source.offset];\n            }\n        } else {\n            if ('delta' in source) {\n                weight = source['delta'][target.offset];\n            } else {\n                weight = target['delta'][source.offset];\n            }\n        }\n\n        return (\n            <g\n                onContextMenu={this.onAltClick}\n            >\n                <line\n                    stroke=\"#000000\"\n                    markerEnd={this.getMarker()}\n                    id={this.props.id}\n                    x1={x1} y1={y1}\n                    x2={x2} y2={y2}\n                />\n                <text id={this.props.id+\"[label]\"} x={midX-offsetX} y={midY+offsetY} className=\"small\">{Math.abs(weight)}</text>\n                <circle id={this.props.id+\"[handle]\"}\n                    r={13} cx={midX} cy={midY} fill=\"transparent\" stroke=\"transparent\"\n                    onClick={this.onClick}\n                />\n            </g>\n        );\n    }\n};\n\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Transition extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    getFill() {\n        if (this.props.ptnet.isRunning())  {\n            if (this.props.ptnet.canFire(this.props.id)) {\n                return \"#62fa75\"\n            } else if (!this.props.ptnet.transitionFails(this.props.id)) {\n                return \"#fab5b0\"\n            }\n        }\n        return \"#ffffff\"\n    }\n\n\n    onClick(evt) {\n        this.props.ptnet.transitionClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    render() {\n        let t = this.props.ptnet.getObj(this.props.id);\n\n        if (!this.state || !t) {\n            return( <g />)\n        }\n\n        return (\n            <g transform=\"translate(-17,-17)\"\n                onClick={this.onClick}\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onDoubleClick={(evt) => evt.preventDefault() }\n                onContextMenu={(evt) => {\n                    console.log(\"rightclick\");\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                }}\n            >\n            <circle id={this.props.id+\"_handle\"} cx={t.position.x+17} cy={t.position.y+17} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n            <rect\n                className=\"transition\" width=\"34\" height=\"34\" fill={this.getFill()} stroke={this.getStroke()}\n                id={this.props.id} x={t.position.x} y={t.position.y}\n            />\n            <text id={this.props.id+\"[label]\"} x={t.position.x} y={t.position.y-8} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class PVar extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.props.ptnet.varClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    onAltClick(evt) {\n        this.props.ptnet.varAltClick(this.props.id);\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    render() {\n        if (! this.state ) { return(<g/>) }\n        let p = this.props.ptnet.getObj(this.props.id).position;\n        let obj = this.props.ptnet.getObj(this.props.id).position;\n\n        let tokenCount = () => {\n            let tokens =this.props.ptnet.vars[this.props.id].initial;\n\n            if (tokens === 0){\n                return // don't show zeros\n            } else if (tokens === 1) {\n                return (<circle cx={p.x} cy={p.y} r=\"2\" id={this.props.id+\"_tokens\"}\n                    fill=\"#000000\"\n                    stroke=\"#000000\" orient=\"0\" className=\"tokens\"/>)\n            } else if (tokens < 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-4} y={p.y+5} className=\"large\">{tokens}</text>)\n            } else if (tokens >= 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-7} y={p.y+5} className=\"small\">{tokens}</text>)\n            }\n        };\n\n        return (\n            <g\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onClick={this.onClick}\n                onContextMenu={this.onAltClick}\n            >\n                <circle id={this.props.id+\"[handle]\"} cx={p.x} cy={p.y} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n                <circle cx={p.x} cy={p.y} r=\"20\"id={this.props.id}\n                        strokeWidth=\"1.5\"\n                        fill=\"#FFFFFF\"\n                        stroke=\"#000000\"\n                        orient=\"0\"\n                        className=\"var\"\n                        shapeRendering=\"auto\"\n                        strokeDasharray=\"4\"\n                />\n                {tokenCount()}\n                <text id={this.props.id+\"[label]\"} x={p.x-20} y={p.y-25} className=\"small\">{this.props.id}</text>\n                <text id={this.props.id+\"[label]\"} x={p.x+25} y={p.y+4} className=\"note\">{this.props.ptnet.vars[this.props.id].description}</text>\n            </g>\n        );\n    }\n};\n","import React, {Component} from 'react';\nimport Place from './Place'\nimport Arc from './Arc'\nimport Transition from './Transition'\nimport PVar from './Var'\n\nclass Net extends Component {\n\n    render() {\n        let p = this.props.ptnet.places;\n        let t = this.props.ptnet.transitions;\n        let v = this.props.ptnet.vars;\n        let place_index = [];\n\n        for (const label in p) {\n            place_index[p[label].offset] = label\n        }\n\n        const vars = Object.keys(v).map((label, index) =>\n            <PVar key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const places = Object.keys(p).map((label, index) =>\n            <Place key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const transitions = Object.keys(t).map((label, index) =>\n            <Transition key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const arcs = [];\n\n        for (const txn in t) {\n            for (const place in t[txn].guards) {\n                let id = txn+'-o'+place;\n                arcs.push(\n                    <Arc key={id}  id={id} ptnet={this.props.ptnet} source={place} target={txn} inhibitor={true} transition={t} />\n                );\n            }\n        }\n\n        for (const txn in t) {\n            for (const i in t[txn].delta) {\n                let v = t[txn].delta[i];\n                if (v > 0) {\n                    let id = txn+'->'+place_index[i];\n                    arcs.push(\n                        <Arc key={id}  id={id} ptnet={this.props.ptnet} source={txn} target={place_index[i]} transition={t}/>\n                    );\n                } else if (v < 0) {\n                    let id = txn+'<-'+place_index[i];\n                    arcs.push(\n                        <Arc key={id} id={id} ptnet={this.props.ptnet} source={place_index[i]} target={txn} transition={t}/>\n                    );\n                }\n            }\n        }\n\n        return (\n            <g id={this.props.schema}>\n                { vars }\n                { arcs }\n                { places }\n                { transitions }\n            </g>\n        );\n    }\n}\n\nexport default Net;\n","export default function NewSimulation(net) {\n    return new StateMachine(net.places, net.transitions);\n}\n\nclass StateMachine {\n    constructor(places, transitions) {\n        this.state = [];\n        this.capacity = [];\n        this.transitions = transitions;\n        this.places = places;\n\n        for (const i in places) {\n            this.capacity[places[i].offset] = places[i].capacity;\n            this.state[places[i].offset] = places[i].initial;\n        }\n\n        this.canFire = this.canFire.bind(this);\n        this.guardsFail = this.guardsFail.bind(this);\n        this.transitionFails = this.transitionFails.bind(this);\n        this.fire = this.fire.bind(this);\n    }\n\n    vadd(state, delta, multiple) {\n        let vout = [];\n        let valid = true;\n        for( const i in state) {\n            vout[i] = state[i] + delta[i] * multiple;\n\n            if (vout[i] < 0 || (this.capacity[i] > 0 && this.capacity[i] > vout[i])) {\n                valid = false\n            }\n        }\n\n        return [vout, valid]\n    }\n\n    guardsFail(oid, multiple) {\n        let res = null;\n        let t = this.transitions[oid];\n        for (const place in t.guards) {\n            res = this.vadd(this.state, t.guards[place], multiple)\n            // guard logic is inverse of normal transition\n            if (res[1]) { // expect vadd to fail\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    transitionFails(oid, multiple) {\n        let t = this.transitions[oid];\n        let res = this.vadd(this.state, t.delta, multiple || 1);\n        return !res[1]\n    }\n\n    canFire(oid, multiple) {\n        if (multiple != null && multiple < 0) {\n            console.error(\"multiple must be positive value got: \" +multiple);\n            return [this.state, false]\n        }\n        let t = this.transitions[oid];\n\n        if (this.guardsFail(oid, multiple || 1)) {\n            return [this.state, false]\n        }\n\n        let res = this.vadd(this.state, t.delta, multiple || 1);\n        return res;\n    }\n\n    fire(oid, multiple, callback) {\n        let res = this.canFire(oid, multiple);\n        if (res[1]) {\n            this.state = res[0];\n            if (callback) { callback() }\n        }\n\n    }\n}\n","import NewSimulation from \"./Simulation\";\n\nexport default function NewPTNet(p) {\n    return new PTNet(p.onLoad, p.onSave, p.onUpdate)\n}\n\nconst HEADER_OFFSET = 60;\n\n// handle editor/simulator actions\nclass PTNet {\n\n    constructor(onLoad, onSave, onUpdate) {\n        // petri-net\n        let pflow = onLoad();\n        this.schema = pflow.schema;\n        this.places = pflow.places;\n        this.transitions = pflow.transitions;\n        this.vars =  pflow.vars || {}; // variables that can be bound to state machine elements\n        this.applyVars(); // overwrite mapped values\n\n        // app state\n        this.mode = 'select';\n        this.update = () => {\n            this.applyVars();\n            onUpdate();\n        };\n        this.save = onSave;\n        this.simulation = null;\n        this.lastSelected = null;\n        this.currentSelection = null;\n\n        // accessors\n        this.getMode = this.getMode.bind(this);\n        this.getObj = this.getObj.bind(this);\n        this.getTokenCount = this.getTokenCount.bind(this);\n        this.getCurrentObj = this.getCurrentObj.bind(this);\n        this.getType = this.getType.bind(this);\n\n        // editor\n        this.menuAction = this.menuAction.bind(this);\n        this.positionUpdated = this.positionUpdated.bind(this);\n        this.applyVars = this.applyVars.bind(this);\n\n        // simulation\n        this.isRunning = this.isRunning.bind(this);\n        this.canFire = this.canFire.bind(this);\n        this.guardsFail = this.guardsFail.bind(this);\n        this.transitionFails = this.transitionFails.bind(this);\n        this.fire = this.fire.bind(this);\n        this.isSelected = this.isSelected.bind(this);\n\n        // elements\n        this.editorClick = this.editorClick.bind(this);\n        this.transitionClick=this.transitionClick.bind(this);\n        this.placeClick=this.placeClick.bind(this);\n        this.arcClick=this.arcClick.bind(this);\n        this.arcAltClick=this.arcAltClick.bind(this);\n        this.placeAltClick=this.placeAltClick.bind(this);\n        this.varClick=this.varClick.bind(this);\n        this.varAltClick=this.varAltClick.bind(this);\n    }\n\n    applyVars() {\n        for (const label in this.vars) {\n            const v = this.vars[label];\n\n            for (const i in v['mapping']) {\n                let rule = v['mapping'][i];\n\n                if ('weight' in rule) { // override an Arc weight\n                    let p = this.getObj(rule['weight']['source']);\n                    let t = this.getObj(rule['weight']['target']);\n                    let unit = -1;\n                    if (p && 'delta' in p) { // transition\n                        // swap\n                        t = this.getObj(rule['weight']['source']);\n                        p = this.getObj(rule['weight']['target']);\n                        unit = 1\n                    }\n                    if (t && p) {\n                        t.delta[p.offset] = v.initial*unit;\n                    }\n                }\n\n                if ('initial' in rule)  {\n                    let p = this.getObj(rule['initial']['target']);\n                    if (!p || p && 'delta' in p) {\n                        return // can't map values to a transition\n                    }\n                    p.initial = v.initial;\n                }\n            }\n        }\n    }\n\n    getType(obj) {\n        if (obj.target && obj.source) {\n            return \"Arc\"\n        }\n\n        if ( obj.target in this.transitions) {\n            return \"Transition\"\n        }\n\n        if (obj.target in this.vars) {\n            return \"Variable\"\n        }\n\n        if (obj.target in this.places) {\n            return \"Place\"\n        }\n    }\n\n    getCurrentObj() {\n        return this.currentSelection;\n    }\n\n    onObjSelect(obj, callback) {\n        this.currentSelection = obj;\n        callback()\n    }\n\n    placeSeq() {\n        let x = 0;\n        while (this.places[\"place\"+x]) {\n            x++;\n        }\n        return \"place\"+x;\n    }\n\n    transitionSeq() {\n        let x = 0;\n        while (this.transitions[\"txn\"+x]) {\n            x++;\n        }\n        return \"txn\"+x;\n    }\n\n    varSeq() {\n        let x = 0;\n        while (this.vars[\"var\"+x]) {\n            x++;\n        }\n        return \"var\"+x;\n    }\n\n    isRunning() {\n        return this.mode === 'execute' && this.simulation != null;\n    }\n\n    getTokenCount(oid) {\n        let p = this.getObj(oid);\n        if (!p) {\n            console.error(\"place not found \" +oid);\n            return -1\n        }\n\n        if (this.isRunning()) {\n            return this.simulation.state[p.offset]\n        } else {\n            return p.initial\n        }\n    }\n\n    fire(oid, multiple) {\n        let updated = false;\n        if (this.isRunning()) {\n            this.simulation.fire(oid, multiple || 1, () => {\n                updated = true;\n            });\n        }\n        return updated;\n    }\n\n    canFire(oid, role) {\n        let t = this.getObj(oid);\n        if (role && t.role !== role) {\n            return false;\n        }\n\n        if (this.isRunning() && oid in this.transitions) {\n            let res = this.simulation.canFire(oid);\n            return res[1];\n        } else {\n            return false\n        }\n    }\n\n    guardsFail(oid, multiple) {\n        return this.simulation.guardsFail(oid, multiple)\n    }\n\n    transitionFails(oid, multiple) {\n        return this.simulation.transitionFails(oid, multiple)\n    }\n\n    getMode() {\n        return this.mode\n    }\n\n    getObj(oid) {\n        if (oid in this.transitions) {\n            return this.transitions[oid];\n        } else if (oid in this.places) {\n                return this.places[oid];\n        } else {\n            return this.vars[oid];\n        }\n    }\n\n    positionUpdated(el, evt, callback) {\n        if (['execute', 'delete'].indexOf(this.mode) >= 0 ) {\n            return\n        }\n\n        let obj = this.getObj(el.props.id);\n        obj.position.x = obj.position.x + evt.movementX;\n        obj.position.y = obj.position.y + evt.movementY;\n        this.update();\n\n        if (callback) {\n            callback()\n        }\n    }\n\n    menuAction(action, callback) {\n        if (this.mode === action) {\n            action = 'select'\n        }\n        //console.log(this.mode, \"->\", action);\n        this.mode=action;\n\n        switch(action) {\n            case \"execute\": {\n                this.simulation = NewSimulation(this);\n                //console.log(this.simulation);\n                break;\n            }\n            default: {\n                //console.error(\"unknown menuAction: \"+action);\n            }\n        }\n\n        this.update();\n        if (callback) {\n            callback(this.mode);\n        }\n    }\n\n    emptyVector() {\n        return Object.keys(this.places).map(() => {\n            return 0\n        })\n    }\n\n    addPlace(coords) {\n        let newOffset = Object.keys(this.places).length;\n        this.places[this.placeSeq()] = {\n            initial: 0,\n            capacity: 0,\n            offset: newOffset,\n            // KLUDGE this allows for the size of the menu bar\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n        };\n\n        // extend delta vector size\n        for (const oid in this.transitions) {\n            this.transitions[oid].delta[newOffset] = 0;\n        }\n\n        return true;\n    }\n\n    addTransition(coords) {\n        let oid = this.transitionSeq();\n        this.transitions[oid] = {\n            role: 'default',\n            delta: this.emptyVector(),\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n            guards: {}\n        };\n        return true;\n    }\n\n    editorClick(evt) {\n        let updated = false;\n        switch (this.mode) {\n            case 'place': {\n                updated = this.addPlace({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            case 'transition': {\n                updated = this.addTransition({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            case 'var': {\n                updated = this.addVar({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            default: {\n            }\n        }\n        evt.stopPropagation();\n        if (updated) { this.update() }\n    }\n\n    validArc(begin, end) {\n        return (\n            (begin in this.places && end in this.transitions) ||\n            (begin in this.transitions && end in this.places)\n        )\n    }\n\n    addArc(begin, end) {\n        let t = null;\n        let p = null;\n        let weight = 0;\n\n        if (begin in this.transitions) {\n            weight = 1;\n            t = this.transitions[begin];\n            p = this.places[end];\n        } else {\n            weight = -1;\n            t = this.transitions[end];\n            p = this.places[begin];\n        }\n\n        t.delta[p.offset] = weight;\n    }\n\n    pairSelected(begin, end) {\n        let updated = false;\n\n        switch (this.mode) {\n            case 'arc': {\n                if (this.validArc(begin, end)) {\n                    //console.log(begin, \"->\", end);\n                    this.addArc(begin, end);\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        this.lastSelected = null;\n        return updated;\n    }\n\n    selectObj(oid) {\n        if (!this.lastSelected) {\n            this.lastSelected = oid;\n        } else {\n            this.pairSelected(this.lastSelected, oid)\n        }\n    }\n\n    delPlace(oid) {\n        let offset = this.places[oid].offset;\n        for (const txn in this.transitions) {\n            delete this.transitions[txn].delta[offset];\n            delete this.transitions[txn].guards[oid];\n        }\n        delete this.places[oid];\n    }\n\n    delArc(obj) {\n        let p = null;\n        let t = null;\n\n        if (obj.source in this.places) {\n            p = obj.source;\n            t = obj.target;\n        } else {\n            t = obj.source;\n            p = obj.target;\n        }\n\n        let offset = this.places[p].offset;\n        this.transitions[t].delta[offset] = 0;\n        delete this.transitions[t].guards[p];\n    }\n\n    placeAltClick(oid) {\n        let updated = false;\n        switch (this.mode) {\n            case 'token': {\n                let p = this.getObj(oid);\n                if (p.initial > 0) {\n                    p.initial--;\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n    }\n\n    placeClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'delete': {\n                    this.delPlace(oid);\n                    break;\n                }\n                case 'arc': {\n                    this.selectObj(oid);\n                    break;\n                }\n                case 'token': {\n                    this.getObj(oid).initial++;\n                    break;\n                }\n                default: {\n                }\n            }\n            this.update()\n        });\n    }\n\n    transitionClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'execute': {\n                    this.fire(oid);\n                    break;\n                }\n                case 'delete': {\n                    delete this.transitions[oid];\n                    this.currentSelection = null;\n                    break;\n                }\n                case 'arc': {\n                    this.selectObj(oid);\n                    break;\n                }\n                default: {\n                }\n            }\n            this.update()\n        });\n\n    }\n\n    isSelected(oid) {\n        return this.lastSelected === oid\n    }\n\n    toggleInhibitor(arc) {\n        if (arc.source in this.transitions) {\n            //console.log(\"inhibitor source must be a place\");\n            return false;\n        }\n\n        let label = arc.source;\n        let p = this.getObj(arc.source);\n        let t = this.getObj(arc.target);\n\n        if (t.delta[p.offset] !== 0) {\n            t.guards[label] = this.emptyVector();\n            t.guards[label][p.offset] = t.delta[p.offset];\n            t.delta[p.offset] = 0;\n        } else {\n            // REVIEW: do we need to invert sign?\n            t.delta[p.offset] = t.guards[label][p.offset];\n            delete t.guards[label];\n        }\n        return true;\n    }\n\n    addGuardToken(t, pid, offset, delta) {\n        let v = t.guards[pid][offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.guards[pid][offset] = v;\n        return true;\n    }\n\n    addArcToken(obj, delta) {\n        let t = null;\n        let p = null;\n        let pid = null;\n        if (obj.source in this.transitions) {\n            t = this.getObj(obj.source);\n            p = this.getObj(obj.target);\n            pid = obj.target;\n        } else {\n            t = this.getObj(obj.target);\n            p = this.getObj(obj.source);\n            pid = obj.source;\n        }\n\n        if (t.delta[p.offset] === 0) {\n            return this.addGuardToken(t, pid, p.offset, delta)\n        }\n\n        let v = t.delta[p.offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.delta[p.offset] = v;\n        return true;\n    }\n\n    arcClick(obj) {\n        this.onObjSelect(obj, ()  => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addArcToken(obj, 1);\n                    break;\n                }\n                case 'delete': {\n                    if (obj.source in this.transitions) {\n                        this.delArc(obj)\n                    } else {\n                        this.delArc(obj)\n                    }\n                    break;\n                }\n                case 'var': {\n                    // TODO: add var mapping\n                }\n                default: {\n                }\n            }\n            this.update()\n        });\n    }\n\n    arcAltClick(obj) {\n        let updated = false;\n        switch (this.mode) {\n            case 'arc': {\n                updated = this.toggleInhibitor(obj);\n                break;\n            }\n            case 'token': {\n                updated = this.addArcToken(obj, -1);\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n\n    }\n\n    addVar(coords) {\n        let newOffset = Object.keys(this.vars).length;\n        this.vars[this.varSeq()] = {\n            initial: 0,\n            offset: newOffset,\n            // KLUDGE this allows for the size of the menu bar\n            position: { x: coords.x, y: coords.y-HEADER_OFFSET },\n        };\n\n        return true;\n    }\n\n    addVarToken(oid, multiple) {\n        this.vars[oid].initial+= multiple || 1;\n        return true\n    }\n\n    varClick(oid) {\n        this.onObjSelect({  target: oid}, () => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addVarToken(oid, 1);\n                    break;\n                }\n                default: {\n                }\n            }\n            this.update();\n        })\n    }\n\n    varAltClick(oid) {\n        this.onObjSelect({ target: oid }, () => {\n            switch (this.mode) {\n                case 'token': {\n                    this.addVarToken(oid, -1);\n                    break;\n                }\n                default: {\n                }\n            }\n            this.update();\n        })\n    }\n\n}\n","import React, { Component } from 'react'\nimport Toolbar from \"./Toolbar\";\nimport Properties from \"./Properties\";\nimport Menu from \"./Menu\";\nimport Net from './Net';\nimport NewPTNet from \"./PTNet\";\n\nexport default class Editor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.state.editorClick(evt);\n    }\n\n    componentDidMount() {\n        this.setState(\n            NewPTNet({\n                onLoad: () => {\n                    let pf = this.props.getPflow();\n                    // KLUDGE: inject vars for initial POC\n                    // need to add a way to store & persist these alongside the net\n                    pf.vars = {\n                        \":COLLATERAL:\": {\n                            initial: 5,\n                            offset: 0,\n                            position: { x: 640, y: 100},\n                            description: \"Amount USD on deposit\",\n                            mapping: [\n                                {weight: { source: \"INPUT\", target: \"COLLATERAL\"}},\n                                {weight: { source: \"COLLATERAL\", target: \"COVER\"}},\n                                {initial: { target: \"COLLATERAL\"}},\n                            ]\n                         },\n                        \":TOKENS:\": {\n                            initial: 7,\n                            offset: 1,\n                            position: { x: 640, y: 180},\n                            description: \"Y: Number of tokens being shorted\",\n                            mapping: [\n                                {weight: { source: \"INPUT\", target: \"TOKENS\"}},\n                                {weight: { source: \"TOKENS\", target: \"COVER\"}},\n                                {initial: {target: \"TOKENS\"}},\n                            ]\n                        },\n                        \":VALUE:\": {\n                            initial: 8,\n                            offset: 2,\n                            position: { x: 640, y: 260},\n                            description: \" Current Value = 2 * Collateral - Y * (rate of pXYZ in block M = 2/7)\",\n                            mapping: [\n                                {weight: { source: \"COVER\", target: \"OUTPUT\"}},\n                            ]\n                        },\n                    };\n                    return pf;\n                },\n                onSave: this.props.setPflow,\n                onUpdate: () => {\n                    this.setState(this.state)\n                }\n            })\n        )\n    }\n\n    render() {\n\n        if (! this.state) {\n            return <React.Fragment/>\n        }\n\n        return (\n            <React.Fragment>\n                <Menu ptnet={this.state} />\n                <Toolbar ptnet={this.state}/>\n                <svg width={window.innerWidth}\n                     height={500}\n                     onContextMenu={(evt) => evt.preventDefault() }\n                     onClick={this.onClick} >\n                    <defs>\n                        <marker id=\"markerArrow1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                            <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                            <path d=\"M2,2 L2,11 L10,6 L2,2\" />\n                        </marker>\n                        <marker id=\"markerInhibit1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                            <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                            <circle cx=\"5\" cy=\"6.5\" r={4}></circle>\n                        </marker>\n                    </defs>\n                    <Net ptnet={this.state} />\n                </svg>\n                < hr/>\n                <Properties ptnet={this.state} />\n            </React.Fragment>\n        )\n      }\n}","import React, {Component} from 'react';\nimport OpenPflow from \"./Pflow/Pflow\";\nimport Editor from './Pflow/Editor';\nimport './App.css'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.getPflow = this.getPflow.bind(this);\n        this.setPflow = this.setPflow.bind(this);\n    }\n\n    getPflow() {\n        return JSON.parse(JSON.stringify(this.state['ptnet']))\n    }\n\n    setPflow(ptnet) {\n        this.setState({\n            ptnet: ptnet\n        })\n    }\n\n    open(schema) {\n        OpenPflow(schema, (ptnet) => {\n            this.setPflow(ptnet)\n        })\n    }\n\n    componentDidMount() {\n        this.open(\"pshort\");\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment />)\n        }\n\n        return (\n            <Editor getPflow={this.getPflow} setPflow={this.setPflow} />\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}