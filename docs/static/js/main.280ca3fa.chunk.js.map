{"version":3,"sources":["Pflow/Pflow.js","Pflow/Drag.js","Pflow/Place.js","Pflow/Arc.js","Pflow/Transition.js","Pflow/Net.js","Pflow/Menu.js","Pflow/Simulation.js","Pflow/PTNet.js","Pflow/Editor.js","App.js","serviceWorker.js","index.js"],"names":["getCoords","obj","x","parseInt","y","getId","id","getWeight","arc","PTNet","schema","net","this","places","transitions","PFlow","pnml","_pnml","_place_ids","_place_labels","_transition_ids","size","Object","keys","length","v","i","subnet","n","loadSubnets","placeIn","entries","p","label","offset","capacity","initial","tokens","position","t","role","delta","emptyVector","guards","a","pkey","tkey","unit","isTransition","place_offset","place_label","type","g","document","r","name","tid","Draggable","dragging","evt","state","props","ptnet","positionUpdated","stopPropagation","window","innerWidth","isSelected","setState","Component","Place","onClick","bind","onAltClick","placeClick","placeAltClick","preventDefault","getObj","onMouseDown","startDrag","onMouseUp","endDrag","onMouseMove","onContextMenu","cx","cy","getHandleWidth","fill","stroke","strokeWidth","getStroke","orient","className","shapeRendering","getTokenCount","tokenCount","Arc","getMarker","source","target","arcClick","getArcDef","arcAltClick","x1","y1","x2","y2","midX","midY","offsetX","offsetY","Math","abs","weight","inhibitor","markerEnd","Transition","canFire","transitionClick","transform","onDoubleClick","console","log","width","height","getFill","Net","place_index","map","index","key","arcs","txn","place","push","transition","ACTIONS","Menu","menuAction","action","mode","getMode","Fragment","actions","style","color","StateMachine","history","fire","multiple","vout","valid","oid","vadd","error","guardsFail","callback","res","onLoad","onSave","onUpdate","pflow","update","save","simulation","lastSelected","isRunning","editorClick","updated","el","indexOf","movementX","movementY","coords","newOffset","placeSeq","transitionSeq","addPlace","clientX","clientY","addTransition","begin","end","validArc","addArc","pairSelected","delPlace","selectObj","pid","addGuardToken","addArcToken","delArc","toggleInhibitor","Editor","getPflow","setPflow","innerHeight","markerWidth","markerHeight","refX","refY","d","App","JSON","parse","stringify","success","xhr","XMLHttpRequest","open","onload","e","readyState","status","parseString","responseText","err","pflow_json","reindex","statusText","onerror","send","OpenPflow","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.280ca3fa.chunk.js","sourcesContent":["\n// initialMarking format is \"Default,0\"\nimport {parseString} from \"xml2js\";\n\nfunction getInitial(placeIn) {\n    return parseInt(placeIn.tokens[0])\n}\n\nfunction getCap(placeIn) {\n    return 0\n}\n\nfunction getCoords(obj) {\n    // REVIEW: pflow designates negative values\n    return { x: parseInt(obj.x), y: parseInt(obj.y)}\n}\n\nfunction getId(obj) {\n    return obj.id[0]\n}\n\nfunction getName(obj) {\n    return obj.name[0]\n}\n\nfunction getWeight(arc) {\n    return parseInt(arc['multiplicity'][0])\n}\n\nfunction isInhibitor(arc) {\n    return arc.type[0] === \"inhibitor\"\n}\n\nexport default function OpenPflow(schema, success, error) {\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"schemata/\"+schema+\".pflow\", true);\n    xhr.onload = (e) => {\n        if (xhr.readyState === 4) {\n            if (xhr.status === 200) {\n                parseString(xhr.responseText, (err, pflow_json) => {\n                    if (err) {\n                        console.error(err)\n                    } else {\n                        let net = new PFlow(schema, pflow_json);\n                        net.reindex();\n                        success(new PTNet(schema, net));\n                    }\n                });\n            } else {\n                error(xhr.statusText);\n                console.error(xhr.statusText);\n            }\n        }\n    };\n    xhr.onerror = function (e) {\n        console.error(xhr.statusText);\n        return null;\n    };\n    xhr.send(null);\n}\n\nclass PTNet {\n    constructor(schema, net) {\n        this.schema = net.schema;\n        this.places = net.places;\n        this.transitions = net.transitions;\n    }\n\n}\n\n// construct PTNet from PFlow\nclass PFlow {\n    constructor(schema, pnml){\n        this.schema = schema;\n        this.places = {};\n        this.transitions = {};\n\n        // used to reindex pflow -> ptnet\n        this._pnml = pnml; // KLUDGE only use first net\n        this._place_ids = {}; // map[string] => offset\n        this._place_labels = {}; // map[string::id] => string\n        this._transition_ids = {}; // map[string] => offset\n    }\n\n    emptyVector() {\n        let size = Object.keys(this.places).length;\n        let v = [];\n        for (let i = 0; i < size; i++) {\n            v[i] = 0;\n        }\n        return v\n    }\n\n    loadSubnets(subnet) {\n\n        if(subnet.subnet) {\n            for (const n of subnet.subnet) {\n                this.loadSubnets(n);\n            }\n        }\n\n        for (const [i, p] of subnet['place'].entries()) {\n            this._place_ids[getId(p)] = i;\n            this._place_labels[getId(p)] = p.label;\n\n            this.places[p.label] = {\n                offset: i,\n                capacity: getCap(p),\n                initial: getInitial(p),\n                position: getCoords(p),\n            };\n        }\n\n        for (const t of subnet['transition']) {\n            this._transition_ids[getId(t)] = t.label;\n            this.transitions[t.label] = {\n                role: \"default\",\n                delta: this.emptyVector(),\n                position: getCoords(t),\n                guards: {},\n            };\n        }\n\n        for ( const a of subnet['arc']) {\n            let pkey = \"\";\n            let tkey = \"\";\n            let unit = null;\n\n            if (this.isTransition(a['destinationId'][0])) {\n                //console.log('(', s, ')', '<-[', d, ']')\n                tkey = 'destinationId';\n                pkey = 'sourceId';\n                unit = getWeight(a)*-1;\n            } else {\n                //console.log('[', s, '] ->','(', d, ')' )\n                tkey = 'sourceId';\n                pkey = 'destinationId';\n                unit = getWeight(a);\n            }\n\n            // TODO deal w/ ref_places (from subnets)\n\n            let t = this.transitions[this._transition_ids[a[tkey]]];\n            let place_offset = this._place_ids[a[pkey]];\n            let place_label = this._place_labels[a[pkey]];\n\n            if (isInhibitor(a)) {\n                let g = this.emptyVector();\n                //console.log('inhibitor', unit)\n                g[place_offset] = unit; // FIXME should this be inverted?\n                t.guards[place_label] = g;\n            }  else {\n                t.delta[place_offset] = unit;\n            }\n\n        }\n    }\n\n    isTransition(label) {\n        if (label in this._transition_ids) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    reindex() {\n        for (const n of this._pnml.document['subnet']) {\n            this.loadSubnets(n);\n        }\n\n        for (const r of this._pnml.document['roles'][0].role) {\n            const label = getName(r);\n            for (const tid of r['transitionId']) {\n                this.transitions[this._transition_ids[tid]].role = label;\n            }\n        }\n    }\n};\n\n","import {Component} from \"react\";\n\nexport default class Draggable extends Component {\n\n    // Keeps a user from mousing-out of the svg if dragging too quickly\n    getHandleWidth() {\n        if (this.state.dragging) {\n            return window.innerWidth*2\n        } else {\n            return 36\n        }\n    }\n\n    getStroke() {\n        if (this.props.ptnet.isSelected(this.props.id)) {\n            return \"#8140ff\"\n        }  else {\n            return \"#000000\"\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ dragging: false, })\n    }\n\n    startDrag(evt) {\n        this.setState({ dragging: true });\n        evt.stopPropagation();\n    }\n\n    endDrag(evt) {\n        this.setState({ dragging: false });\n        evt.stopPropagation();\n    }\n\n    dragging = (evt) => {\n        if (this.state.dragging) {\n            this.props.ptnet.positionUpdated(this, evt);\n        }\n        evt.stopPropagation();\n    };\n\n}\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Place extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.props.ptnet.placeClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    onAltClick(evt) {\n        this.props.ptnet.placeAltClick(this.props.id);\n        evt.preventDefault();\n        evt.stopPropagation();\n    }\n\n    render() {\n        if (! this.state ) { return(<g/>) }\n        let p = this.props.ptnet.getObj(this.props.id).position;\n\n        let tokenCount = () => {\n            let tokens = this.props.ptnet.getTokenCount(this.props.id);\n\n            if (tokens === 0){\n                return // don't show zeros\n            } else if (tokens === 1) {\n                return (<circle cx={p.x} cy={p.y} r=\"2\" id={this.props.id+\"_tokens\"} fill=\"#000000\" stroke=\"#000000\" orient=\"0\" className=\"tokens\"/>)\n            } else if (tokens < 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-4} y={p.y+5} className=\"large\">{tokens}</text>)\n            } else if (tokens >= 10) {\n                return (<text id={this.props.id+\"_tokens\"} x={p.x-7} y={p.y+5} className=\"small\">{tokens}</text>)\n            }\n        };\n\n        return (\n            <g\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onClick={this.onClick}\n                onContextMenu={this.onAltClick}\n            >\n                <circle id={this.props.id+\"_handle\"} cx={p.x} cy={p.y} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n                <circle cx={p.x} cy={p.y} r=\"20\"id={this.props.id}\n                        strokeWidth=\"1.5\" fill=\"#FFFFFF\" stroke={this.getStroke()} orient=\"0\"\n                        className=\"place\"\n                        shapeRendering=\"auto\"\n                />\n                {tokenCount()}\n                <text id={this.props.id+\"[label]\"} x={p.x-20} y={p.y-25} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n","import React, { Component } from 'react'\n\nexport default class Arc extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n        this.onAltClick = this.onAltClick.bind(this);\n        this.getMarker = this.getMarker.bind(this);\n    }\n\n    getArcDef() {\n        return {source: this.props.source, target: this.props.target};\n    }\n\n    onClick(evt) {\n        evt.stopPropagation();\n        this.props.ptnet.arcClick(this.getArcDef());\n    }\n\n    onAltClick(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        this.props.ptnet.arcAltClick(this.getArcDef());\n    }\n\n    getMarker() {\n        if (this.props['inhibitor']) {\n            return \"url(#markerInhibit1)\"\n        } else {\n            return \"url(#markerArrow1)\"\n        }\n    }\n\n    render() {\n        let source = this.props.ptnet.getObj(this.props.source);\n        let target = this.props.ptnet.getObj(this.props.target);\n        if (! source || ! target) {\n            return (< g/>)\n        }\n\n        let x1=source.position.x;\n        let y1=source.position.y;\n        let x2=target.position.x;\n        let y2=target.position.y;\n\n        let midX = (x2+x1)/2;\n        let midY = (y2+y1)/2 - 8;\n        let offsetX=4;\n        let offsetY=4;\n\n        if (Math.abs(x2-midX) < 8) {\n            offsetX=8;\n        }\n\n        if (Math.abs(y2-midY) < 8) {\n            offsetY=0;\n        }\n\n        let weight = 0;\n        if (this.props.inhibitor) {\n            if ('delta' in source) {\n                weight = source.guards[this.props.target][target.offset];\n            } else {\n                weight = target.guards[this.props.source][source.offset];\n            }\n        } else {\n            if ('delta' in source) {\n                weight = source['delta'][target.offset];\n            } else {\n                weight = target['delta'][source.offset];\n            }\n        }\n\n        return (\n            <g\n                onContextMenu={this.onAltClick}\n            >\n                <line\n                    stroke=\"#000000\"\n                    markerEnd={this.getMarker()}\n                    id={this.props.id}\n                    x1={x1} y1={y1}\n                    x2={x2} y2={y2}\n                />\n                <text id={this.props.id+\"[label]\"} x={midX-offsetX} y={midY+offsetY} className=\"small\">{Math.abs(weight)}</text>\n                <circle id={this.props.id+\"[handle]\"}\n                    r={13} cx={midX} cy={midY} fill=\"transparent\" stroke=\"transparent\"\n                    onClick={this.onClick}\n                />\n            </g>\n        );\n    }\n};\n\n","import React from 'react'\nimport Draggable from \"./Drag\";\n\nexport default class Transition extends Draggable {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    getFill() {\n        if (this.props.ptnet.canFire(this.props.id)) {\n            return \"#facade\"\n        } else {\n            return \"#ffffff\"\n        }\n    }\n\n\n    onClick(evt) {\n        this.props.ptnet.transitionClick(this.props.id);\n        evt.stopPropagation();\n    }\n\n    render() {\n        let t = this.props.ptnet.getObj(this.props.id);\n\n        if (!this.state || !t) {\n            return( <g />)\n        }\n\n        return (\n            <g transform=\"translate(-17,-17)\"\n                onClick={this.onClick}\n                onMouseDown={ (evt) => this.startDrag(evt) }\n                onMouseUp={ (evt) => this.endDrag(evt) }\n                onMouseMove={ (evt) => this.dragging(evt) }\n                onDoubleClick={(evt) => evt.preventDefault() }\n                onContextMenu={(evt) => {\n                    console.log(\"rightclick\");\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                }}\n            >\n            <circle id={this.props.id+\"_handle\"} cx={t.position.x+17} cy={t.position.y+17} r={this.getHandleWidth()} fill=\"transparent\" stroke=\"transparent\"></circle>\n            <rect\n                className=\"transition\" width=\"34\" height=\"34\" fill={this.getFill()} stroke={this.getStroke()}\n                id={this.props.id} x={t.position.x} y={t.position.y}\n            />\n            <text id={this.props.id+\"[label]\"} x={t.position.x} y={t.position.y-8} className=\"small\">{this.props.id}</text>\n            </g>\n        );\n    }\n};\n\n","import React, {Component} from 'react';\nimport Place from './Place'\nimport Arc from './Arc'\nimport Transition from './Transition'\n\nclass Net extends Component {\n\n    render() {\n        let p = this.props.ptnet.places;\n        let t = this.props.ptnet.transitions;\n        let place_index = [];\n\n        for (const label in p) {\n            place_index[p[label].offset] = label\n        }\n\n        const places = Object.keys(p).map((label, index) =>\n            <Place key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const transitions = Object.keys(t).map((label, index) =>\n            <Transition key={label} id={label} ptnet={this.props.ptnet} />\n        );\n\n        const arcs = [];\n\n        for (const txn in t) {\n            for (const place in t[txn].guards) {\n                let id = txn+'-o'+place;\n                arcs.push(\n                    <Arc key={id}  id={id} ptnet={this.props.ptnet} source={place} target={txn} inhibitor={true} transition={t} />\n                );\n            }\n        }\n\n        for (const txn in t) {\n            for (const i in t[txn].delta) {\n                let v = t[txn].delta[i];\n                if (v > 0) {\n                    let id = txn+'->'+place_index[i];\n                    arcs.push(\n                        <Arc key={id}  id={id} ptnet={this.props.ptnet} source={txn} target={place_index[i]} transition={t}/>\n                    );\n                } else if (v < 0) {\n                    let id = txn+'<-'+place_index[i];\n                    arcs.push(\n                        <Arc key={id} id={id} ptnet={this.props.ptnet} source={place_index[i]} target={txn} transition={t}/>\n                    );\n                }\n            }\n        }\n\n        return (\n            <g id={this.props.schema}>\n                { arcs }\n                { places }\n                { transitions }\n            </g>\n        );\n    }\n}\n\nexport default Net;\n","import React, { Component } from 'react'\n\nconst ACTIONS = [\n    \"select\",\n    \"delete\",\n    \"place\",\n    \"transition\",\n    \"arc\",\n    \"token\",\n    \"execute\",\n];\n\nexport default class Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.menuAction = this.menuAction.bind(this);\n    }\n\n    menuAction(action) {\n        this.props.ptnet.menuAction(action, (mode) => {\n            this.setState({ mode: mode })\n        })\n    }\n\n    componentDidMount() {\n        this.setState({ mode: this.props.ptnet.getMode() })\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment/>)\n        }\n\n        let actions = ACTIONS.map((label) => {\n            let style = { color: \"grey\"};\n            if (this.state.mode === label) {\n                style = { color: \"black\"};\n            }\n            return (<button key={label} style={style} name={label}\n                onClick={() => this.menuAction(label)}\n                onContextMenu={(evt) => evt.preventDefault() }\n            >{label}</button>)\n        }) ;\n\n        return (\n            <div className=\"menu\" mode={this.props.ptnet.mode}> {actions} </div>\n        )\n    }\n}\n","export default function NewSimulation(net) {\n    return new StateMachine(net.places, net.transitions);\n}\n\nclass StateMachine {\n    constructor(places, transitions) {\n        this.state = [];\n        this.capacity = [];\n        this.transitions = transitions;\n        this.history = [];\n\n        for (const i in places) {\n            this.capacity[places[i].offset] = places[i].capacity;\n            this.state[places[i].offset] = places[i].initial;\n        }\n\n        this.canFire = this.canFire.bind(this);\n        this.fire = this.fire.bind(this);\n    }\n\n    vadd(state, delta, multiple) {\n        let vout = [];\n        let valid = true;\n        for( const i in state) {\n            vout[i] = state[i] + delta[i] * multiple;\n\n            if (vout[i] < 0 || (this.capacity[i] > 0 && this.capacity[i] > vout[i])) {\n                valid = false\n            }\n        }\n\n        return [vout, valid]\n    }\n\n    guardsFail(oid, multiple) {\n        let res = null;\n        let t = this.transitions[oid];\n        for (const place in t.guards) {\n            res = this.vadd(this.state, t.guards[place], multiple)\n            // guard logic is inverse of normal transition\n            if (res[1]) { // expect vadd to fail\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    canFire(oid, multiple) {\n        if (multiple != null && multiple < 0) {\n            console.error(\"multiple must be positive value got: \" +multiple);\n            return [this.state, false]\n        }\n        let t = this.transitions[oid];\n\n        if (this.guardsFail(oid, multiple || 1)) {\n            return [this.state, false]\n        }\n\n        let res = this.vadd(this.state, t.delta, multiple || 1);\n        return res;\n    }\n\n    fire(oid, multiple, callback) {\n        let res = this.canFire(oid, multiple);\n        if (res[1]) {\n            this.state = res[0];\n            if (callback) { callback() }\n        }\n\n    }\n}\n","import NewSimulation from \"./Simulation\";\n\nexport default function NewPTNet(p) {\n    return new PTNet(p.onLoad, p.onSave, p.onUpdate)\n}\n\n// handle editor/simulator actions\nclass PTNet {\n\n    constructor(onLoad, onSave, onUpdate) {\n        // petri-net\n        let pflow = onLoad();\n        this.schema = pflow.schema;\n        this.places = pflow.places;\n        this.transitions = pflow.transitions;\n\n        // app state\n        this.mode = 'select';\n        this.update = onUpdate;\n        this.save = onSave;\n        this.simulation = null;\n        this.lastSelected = null;\n\n        // accessors\n        this.getMode = this.getMode.bind(this);\n        this.getObj = this.getObj.bind(this);\n        this.getTokenCount = this.getTokenCount.bind(this);\n\n        // editor\n        this.menuAction = this.menuAction.bind(this);\n        this.positionUpdated = this.positionUpdated.bind(this);\n\n        // simulation\n        this.isRunning = this.isRunning.bind(this);\n        this.canFire = this.canFire.bind(this);\n        this.fire = this.fire.bind(this);\n        this.isSelected = this.isSelected.bind(this);\n\n        // elements\n        this.editorClick = this.editorClick.bind(this);\n        this.transitionClick=this.transitionClick.bind(this);\n        this.placeClick=this.placeClick.bind(this);\n        this.arcClick=this.arcClick.bind(this);\n        this.arcAltClick=this.arcAltClick.bind(this);\n        this.placeAltClick=this.placeAltClick.bind(this);\n    }\n\n    placeSeq() {\n        let x = 0;\n        while (this.places[\"place\"+x]) {\n            x++;\n        }\n        return \"place\"+x;\n    }\n\n    transitionSeq() {\n        let x = 0;\n        while (this.transitions[\"txn\"+x]) {\n            x++;\n        }\n        return \"txn\"+x;\n    }\n\n    isRunning() {\n        return this.mode === 'execute' && this.simulation != null;\n    }\n\n    getTokenCount(oid) {\n        let p = this.getObj(oid);\n        if (!p) {\n            console.error(\"place not found \" +oid);\n            return -1\n        }\n\n        if (this.isRunning()) {\n            return this.simulation.state[p.offset]\n        } else {\n            return p.initial\n        }\n    }\n\n    fire(oid, multiple) {\n        let updated = false;\n        if (this.isRunning()) {\n            this.simulation.fire(oid, multiple || 1, () => {\n                updated = true;\n            });\n        }\n        return updated;\n    }\n\n    canFire(oid, role) {\n        let t = this.getObj(oid);\n        if (role && t.role !== role) {\n            return false;\n        }\n\n        if (this.isRunning() && oid in this.transitions) {\n            let res = this.simulation.canFire(oid);\n            return res[1];\n        } else {\n            return false\n        }\n    }\n\n    getMode() {\n        return this.mode\n    }\n\n    getObj(oid) {\n        if (oid in this.transitions) {\n            return this.transitions[oid];\n        } else {\n            return this.places[oid];\n        }\n    }\n\n    positionUpdated(el, evt, callback) {\n        if (['execute', 'delete'].indexOf(this.mode) >= 0 ) {\n            return\n        }\n\n        let obj = this.getObj(el.props.id);\n        obj.position.x = obj.position.x + evt.movementX;\n        obj.position.y = obj.position.y + evt.movementY;\n        this.update();\n\n        if (callback) {\n            callback()\n        }\n    }\n\n    menuAction(action, callback) {\n        if (this.mode === action) {\n            action = 'select'\n        }\n        //console.log(this.mode, \"->\", action);\n        this.mode=action;\n\n        switch(action) {\n            case \"execute\": {\n                this.simulation = NewSimulation(this);\n                //console.log(this.simulation);\n                break;\n            }\n            default: {\n                //console.error(\"unknown menuAction: \"+action);\n            }\n        }\n\n        this.update();\n        if (callback) {\n            callback(this.mode);\n        }\n    }\n\n    emptyVector() {\n        return Object.keys(this.places).map(() => {\n            return 0\n        })\n    }\n\n    addPlace(coords) {\n        let newOffset = Object.keys(this.places).length;\n        this.places[this.placeSeq()] = {\n            initial: 0,\n            capacity: 0,\n            offset: newOffset,\n            position: coords,\n        };\n\n        // extend delta vector size\n        for (const oid in this.transitions) {\n            this.transitions[oid].delta[newOffset] = 0;\n        }\n\n        return true;\n    }\n\n    addTransition(coords) {\n        let oid = this.transitionSeq();\n        this.transitions[oid] = {\n            role: 'default',\n            delta: this.emptyVector(),\n            position: coords,\n            guards: {}\n        };\n        return true;\n    }\n\n    editorClick(evt) {\n        let updated = false;\n        switch (this.mode) {\n            case 'place': {\n                updated = this.addPlace({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            case 'transition': {\n                updated = this.addTransition({x: evt.clientX-8, y: evt.clientY-25});\n                break;\n            }\n            default: {\n            }\n        }\n        evt.stopPropagation();\n        if (updated) { this.update() }\n    }\n\n    validArc(begin, end) {\n        return (\n            (begin in this.places && end in this.transitions) ||\n            (begin in this.transitions && end in this.places)\n        )\n    }\n\n    addArc(begin, end) {\n        let t = null;\n        let p = null;\n        let weight = 0;\n\n        if (begin in this.transitions) {\n            weight = 1;\n            t = this.transitions[begin];\n            p = this.places[end];\n        } else {\n            weight = -1;\n            t = this.transitions[end];\n            p = this.places[begin];\n        }\n\n        t.delta[p.offset] = weight;\n    }\n\n    pairSelected(begin, end) {\n        let updated = false;\n\n        switch (this.mode) {\n            case 'arc': {\n                if (this.validArc(begin, end)) {\n                    //console.log(begin, \"->\", end);\n                    this.addArc(begin, end);\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        this.lastSelected = null;\n        return updated;\n    }\n\n    selectObj(oid) {\n        if (!this.lastSelected) {\n            this.lastSelected = oid;\n        } else {\n            this.pairSelected(this.lastSelected, oid)\n        }\n    }\n\n    delPlace(oid) {\n        let offset = this.places[oid].offset;\n        for (const txn in this.transitions) {\n            delete this.transitions[txn].delta[offset];\n            delete this.transitions[txn].guards[oid];\n        }\n        delete this.places[oid];\n    }\n\n    delArc(obj) {\n        let p = null;\n        let t = null;\n\n        if (obj.source in this.places) {\n            p = obj.source;\n            t = obj.target;\n        } else {\n            t = obj.source;\n            p = obj.target;\n        }\n\n        let offset = this.places[p].offset;\n        this.transitions[t].delta[offset] = 0;\n        delete this.transitions[t].guards[p];\n    }\n\n    placeAltClick(oid) {\n        let updated = false;\n        switch (this.mode) {\n            case 'token': {\n                let p = this.getObj(oid);\n                if (p.initial > 0) {\n                    p.initial--;\n                    updated = true;\n                }\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n    }\n\n    placeClick(oid) {\n        let updated = false;\n        switch (this.mode) {\n            case 'delete': {\n                this.delPlace(oid);\n                updated = true;\n                break;\n            }\n            case 'arc': {\n                this.selectObj(oid);\n                updated = true;\n                break;\n            }\n            case 'token': {\n                this.getObj(oid).initial++;\n                updated = true;\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n    }\n\n    transitionClick(oid) {\n        let updated = false;\n        switch (this.mode) {\n            case 'execute': {\n                updated = this.fire(oid);\n                break;\n            }\n            case 'delete': {\n                delete this.transitions[oid];\n                updated = true;\n                break;\n            }\n            case 'arc': {\n                this.selectObj(oid);\n                updated = true;\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n\n    }\n\n    isSelected(oid) {\n        return this.lastSelected === oid\n    }\n\n    toggleInhibitor(arc) {\n        if (arc.source in this.transitions) {\n            //console.log(\"inhibitor source must be a place\");\n            return false;\n        }\n\n        let label = arc.source;\n        let p = this.getObj(arc.source);\n        let t = this.getObj(arc.target);\n\n        if (t.delta[p.offset] !== 0) {\n            t.guards[label] = this.emptyVector();\n            t.guards[label][p.offset] = t.delta[p.offset];\n            t.delta[p.offset] = 0;\n        } else {\n            // REVIEW: do we need to invert sign?\n            t.delta[p.offset] = t.guards[label][p.offset];\n            delete t.guards[label];\n        }\n        return true;\n    }\n\n    addGuardToken(t, pid, offset, delta) {\n        let v = t.guards[pid][offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.guards[pid][offset] = v;\n        return true;\n    }\n\n    addArcToken(obj, delta) {\n        let t = null;\n        let p = null;\n        let pid = null;\n        if (obj.source in this.transitions) {\n            t = this.getObj(obj.source);\n            p = this.getObj(obj.target);\n            pid = obj.target;\n        } else {\n            t = this.getObj(obj.target);\n            p = this.getObj(obj.source);\n            pid = obj.source;\n        }\n\n        if (t.delta[p.offset] === 0) {\n            return this.addGuardToken(t, pid, p.offset, delta)\n        }\n\n        let v = t.delta[p.offset];\n\n        if (v > 0) {\n            v += delta;\n        }\n        if (v < 0) {\n            v -= delta;\n        }\n\n        if (v === 0) {\n            return false;\n        }\n\n        t.delta[p.offset] = v;\n        return true;\n    }\n\n    arcClick(obj) {\n        let updated = false;\n        switch (this.mode) {\n            case 'token': {\n                console.log(\"token++\");\n                updated = this.addArcToken(obj, 1);\n                break;\n            }\n            case 'delete': {\n                if (obj.source in this.transitions) {\n                    this.delArc(obj)\n                } else {\n                    this.delArc(obj)\n                }\n                updated = true;\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n    }\n\n    arcAltClick(obj) {\n        let updated = false;\n        switch (this.mode) {\n            case 'arc': {\n                updated = this.toggleInhibitor(obj);\n                break;\n            }\n            case 'token': {\n                updated = this.addArcToken(obj, -1);\n                break;\n            }\n            default: {\n            }\n        }\n        if (updated) { this.update() }\n\n    }\n}\n","import React, { Component } from 'react'\nimport Net from './Net';\nimport Menu from \"./Menu\";\nimport NewPTNet from \"./PTNet\";\n\nexport default class Editor extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(evt) {\n        this.state.editorClick(evt);\n    }\n\n    componentDidMount() {\n        this.setState(\n            NewPTNet({\n                onLoad: this.props.getPflow,\n                onSave: this.props.setPflow,\n                onUpdate: () => {\n                    this.setState(this.state)\n                }\n            })\n        )\n    }\n\n    render() {\n\n        if (! this.state) {\n            return <React.Fragment/>\n        }\n\n        return (\n            <React.Fragment>\n                <Menu ptnet={this.state}/>\n                <svg width={window.innerWidth}\n                     height={window.innerHeight}\n                     onContextMenu={(evt) => evt.preventDefault() }\n                     onClick={this.onClick}\n                >\n                <defs>\n                    <marker id=\"markerArrow1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                        <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                        <path d=\"M2,2 L2,11 L10,6 L2,2\" />\n                    </marker>\n                    <marker id=\"markerInhibit1\" markerWidth=\"23\" markerHeight=\"13\" refX=\"31\" refY=\"6\" orient=\"auto\">\n                        <rect className=\"transition\" width=\"28\" height=\"3\" fill=\"#ffffff\" stroke=\"#ffffff\" x=\"3\" y=\"5\" />\n                        <circle cx=\"5\" cy=\"6.5\" r={4}></circle>\n                    </marker>\n                </defs>\n                <Net ptnet={this.state} />\n                </svg>\n            </React.Fragment>\n        )\n      }\n}","import React, {Component} from 'react';\nimport OpenPflow from \"./Pflow/Pflow\";\nimport Editor from './Pflow/Editor';\nimport './App.css'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.getPflow = this.getPflow.bind(this);\n        this.setPflow = this.setPflow.bind(this);\n    }\n\n    getPflow() {\n        return JSON.parse(JSON.stringify(this.state['ptnet']))\n    }\n\n    setPflow(ptnet) {\n        this.setState({\n            ptnet: ptnet\n        })\n    }\n\n    open(schema) {\n        OpenPflow(schema, (ptnet) => {\n            this.setPflow(ptnet)\n        })\n    }\n\n    componentDidMount() {\n        this.open(\"counter\");\n    }\n\n    render() {\n        if (! this.state) {\n            return (<React.Fragment />)\n        }\n\n        return (\n            <div className={\"App\"}>\n                <Editor getPflow={this.getPflow} setPflow={this.setPflow} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}